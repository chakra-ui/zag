{
  "accordion": {
    "api": {
      "focusedValue": {
        "type": "string",
        "description": "The value of the focused accordion item."
      },
      "value": {
        "type": "string | string[]",
        "description": "The value of the accordion"
      },
      "setValue": {
        "type": "(value: string | string[]) => void",
        "description": "Sets the value of the accordion."
      },
      "getItemState": {
        "type": "(props: ItemState",
        "description": "Gets the state of an accordion item."
      }
    },
    "context": {
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "ids": {
        "type": "Partial<{ root: string; item(value: string): string; content(value: string): string; trigger(value: string): string; }>",
        "description": "The ids of the elements in the accordion. Useful for composition."
      },
      "multiple": {
        "type": "boolean",
        "description": "Whether multple accordion items can be open at the same time.",
        "defaultValue": "false"
      },
      "collapsible": {
        "type": "boolean",
        "description": "Whether an accordion item can be collapsed after it has been opened.",
        "defaultValue": "false"
      },
      "value": {
        "type": "string | string[]",
        "description": "The `id` of the accordion item that is currently being opened."
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the accordion items are disabled"
      },
      "onChange": {
        "type": "(details: { value: string | string[]; }) => void",
        "description": "The callback fired when the state of opened/closed accordion items changes."
      },
      "orientation": {
        "type": "\"horizontal\" | \"vertical\"",
        "description": "The orientation of the accordion items."
      }
    }
  },
  "avatar": {
    "api": {
      "isLoaded": {
        "type": "boolean",
        "description": "Whether the image is loaded."
      },
      "showFallback": {
        "type": "boolean",
        "description": "Whether the fallback is shown."
      },
      "setSrc": {
        "type": "(src: string) => void",
        "description": "Function to set new src."
      },
      "setLoaded": {
        "type": "() => void",
        "description": "Function to set loaded state."
      },
      "setError": {
        "type": "() => void",
        "description": "Function to set error state."
      }
    },
    "context": {
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  },
  "carousel": {
    "api": {
      "index": {
        "type": "number",
        "description": "The current index of the carousel"
      },
      "scrollProgress": {
        "type": "number",
        "description": "The current scroll progress of the carousel"
      },
      "isAutoplay": {
        "type": "boolean",
        "description": "Whether the carousel is currently auto-playing"
      },
      "canScrollNext": {
        "type": "boolean",
        "description": "Whether the carousel is can scroll to the next slide"
      },
      "canScrollPrev": {
        "type": "boolean",
        "description": "Whether the carousel is can scroll to the previous slide"
      },
      "scrollTo": {
        "type": "(index: number, jump?: boolean) => void",
        "description": "Function to scroll to a specific slide index"
      },
      "scrollToNext": {
        "type": "() => void",
        "description": "Function to scroll to the next slide"
      },
      "scrollToPrevious": {
        "type": "() => void",
        "description": "Function to scroll to the previous slide"
      },
      "getSlideState": {
        "type": "(props: SlideProps) => { valueText: string; isCurrent: boolean; isNext: boolean; isPrevious: boolean; isInView: boolean; }",
        "description": "Returns the state of a specific slide"
      },
      "play": {
        "type": "() => void",
        "description": "Function to start/resume autoplay"
      },
      "pause": {
        "type": "() => void",
        "description": "Function to pause autoplay"
      }
    },
    "context": {
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "orientation": {
        "type": "\"horizontal\" | \"vertical\"",
        "description": "The orientation of the carousel.",
        "defaultValue": "\"horizontal\""
      },
      "align": {
        "type": "\"start\" | \"center\" | \"end\"",
        "description": "The alignment of the slides in the carousel."
      },
      "slidesPerView": {
        "type": "number | \"auto\"",
        "description": "The number of slides to show at a time."
      },
      "loop": {
        "type": "boolean",
        "description": "Whether the carousel should loop around."
      },
      "index": {
        "type": "number",
        "description": "The current slide index."
      },
      "spacing": {
        "type": "string",
        "description": "The amount of space between slides."
      },
      "onSlideChange": {
        "type": "(details: ChangeDetails) => void",
        "description": "Function called when the slide changes."
      },
      "ids": {
        "type": "Partial<{ root: string; viewport: string; slide(index: number): string; slideGroup: string; nextTrigger: string; prevTrigger: string; indicatorGroup: string; indicator(index: number): string; }>",
        "description": "The ids of the elements in the carousel. Useful for composition."
      }
    }
  },
  "checkbox": {
    "api": {
      "isChecked": {
        "type": "boolean",
        "description": "Whether the checkbox is checked"
      },
      "isDisabled": {
        "type": "boolean",
        "description": "Whether the checkbox is disabled"
      },
      "isIndeterminate": {
        "type": "boolean",
        "description": "Whether the checkbox is indeterminate"
      },
      "isFocused": {
        "type": "boolean",
        "description": "Whether the checkbox is focused"
      },
      "checkedState": {
        "type": "CheckedState",
        "description": "The checked state of the checkbox"
      },
      "setChecked": {
        "type": "(checked: CheckedState) => void",
        "description": "Function to set the checked state of the checkbox"
      },
      "toggleChecked": {
        "type": "() => void",
        "description": "Function to toggle the checked state of the checkbox"
      }
    },
    "context": {
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "ids": {
        "type": "Partial<{ root: string; input: string; control: string; label: string; }>",
        "description": "The ids of the elements in the checkbox. Useful for composition."
      },
      "disabled": {
        "type": "boolean",
        "description": "If `true`, the checkbox will be disabled"
      },
      "invalid": {
        "type": "boolean",
        "description": "If `true`, the checkbox is marked as invalid."
      },
      "required": {
        "type": "boolean",
        "description": "If `true`, the checkbox input is marked as required,"
      },
      "checked": {
        "type": "CheckedState",
        "description": "If `true`, the checkbox will be checked."
      },
      "onChange": {
        "type": "(details: { checked: CheckedState; }) => void",
        "description": "The callback invoked when the checked state of the `Checkbox` changes."
      },
      "name": {
        "type": "string",
        "description": "The name of the input field in a checkbox. Useful for form submission."
      },
      "form": {
        "type": "string",
        "description": "The id of the form that the checkbox belongs to."
      },
      "value": {
        "type": "string",
        "description": "The value of checkbox input. Useful for form submission.",
        "defaultValue": "\"on\""
      }
    }
  },
  "color-picker": {
    "api": {
      "isDragging": {
        "type": "boolean",
        "description": "Whether the color picker is being dragged"
      },
      "value": {
        "type": "string",
        "description": "The current color value (as a string)"
      },
      "valueAsColor": {
        "type": "Color",
        "description": "The current color value (as a Color object)"
      },
      "channels": {
        "type": "[ColorChannel]",
        "description": "The current color channels of the color"
      },
      "setColor": {
        "type": "(value: string | Color) => void",
        "description": "Function to set the color value"
      },
      "setChannelValue": {
        "type": "(channel: ColorChannel, value: number) => void",
        "description": "Function to set the color value of a specific channel"
      },
      "setFormat": {
        "type": "(format: ColorFormat) => void",
        "description": "Function to set the color format"
      }
    },
    "context": {
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "ids": {
        "type": "Partial<{ content: string; area: string; areaGradient: string; areaThumb: string; channelInput(id: string): string; channelSliderTrack(id: ColorChannel): string; }>",
        "description": "The ids of the elements in the color picker. Useful for composition."
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The direction of the color picker"
      },
      "value": {
        "type": "string",
        "description": "The current color value"
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the color picker is disabled"
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the color picker is read-only"
      },
      "onChange": {
        "type": "(details: ChangeDetails) => void",
        "description": "Handler that is called when the value changes, as the user drags."
      },
      "onChangeEnd": {
        "type": "(details: ChangeDetails) => void",
        "description": "Handler that is called when the user stops dragging."
      }
    }
  },
  "combobox": {
    "api": {
      "isFocused": {
        "type": "boolean",
        "description": "Whether the combobox is focused"
      },
      "isOpen": {
        "type": "boolean",
        "description": "Whether the combobox content or listbox is open"
      },
      "isInputValueEmpty": {
        "type": "boolean",
        "description": "Whether the combobox input is empty"
      },
      "inputValue": {
        "type": "string",
        "description": "The current value of the combobox input"
      },
      "focusedOption": {
        "type": "OptionData",
        "description": "The currently focused option (by pointer or keyboard)"
      },
      "selectedValue": {
        "type": "string",
        "description": "The currently selected option value"
      },
      "setValue": {
        "type": "(value: string | OptionData) => void",
        "description": "Function to set the combobox value"
      },
      "setInputValue": {
        "type": "(value: string) => void",
        "description": "Function to set the combobox input value"
      },
      "clearValue": {
        "type": "() => void",
        "description": "Function to clear the combobox input value and selected value"
      },
      "focus": {
        "type": "() => void",
        "description": "Function to focus the combobox input"
      }
    },
    "context": {
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "ids": {
        "type": "Partial<{ root: string; label: string; control: string; input: string; content: string; trigger: string; clearTrigger: string; option(id: string, index?: number): string; positioner: string; }>",
        "description": "The ids of the elements in the combobox. Useful for composition."
      },
      "inputValue": {
        "type": "string",
        "description": "The current value of the combobox's input"
      },
      "selectionData": {
        "type": "OptionData",
        "description": "The selected option's value"
      },
      "name": {
        "type": "string",
        "description": "The `name` attribute of the combobox's input. Useful for form submission"
      },
      "form": {
        "type": "string",
        "description": "The associate form of the combobox."
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the combobox is disabled"
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the combobox is readonly. This puts the combobox in a \"non-editable\" mode\nbut the user can still interact with it"
      },
      "invalid": {
        "type": "boolean",
        "description": "Whether the combobox is required"
      },
      "placeholder": {
        "type": "string",
        "description": "The placeholder text of the combobox's input"
      },
      "inputBehavior": {
        "type": "\"autohighlight\" | \"autocomplete\" | \"none\"",
        "description": "Defines the auto-completion behavior of the combobox.\n\n- `autohighlight`: The first focused option is highlighted as the user types\n- `autocomplete`: Navigating the listbox with the arrow keys selects the option and the input is updated"
      },
      "blurOnSelect": {
        "type": "boolean",
        "description": "Whether to blur the input on select"
      },
      "selectionBehavior": {
        "type": "\"clear\" | \"set\"",
        "description": "The behavior of the combobox when an option is selected"
      },
      "selectOnTab": {
        "type": "boolean",
        "description": "Whether to select the focused option when the `Tab` key is pressed"
      },
      "autoFocus": {
        "type": "boolean",
        "description": "Whether to autofocus the input on mount"
      },
      "selectInputOnFocus": {
        "type": "boolean",
        "description": "Whether to select the input's text content on focus"
      },
      "focusOnClear": {
        "type": "boolean",
        "description": "Whether to return focus to the input on click the clear button"
      },
      "openOnClick": {
        "type": "boolean",
        "description": "Whether to open the combobox popup on initial click on the input"
      },
      "allowCustomValue": {
        "type": "boolean",
        "description": "Whether to allow custom values or free values in the input"
      },
      "ariaHidden": {
        "type": "boolean",
        "description": "Whether to hide all elements besides the combobox parts. Useful for accessibility"
      },
      "isCustomValue": {
        "type": "(details: { inputValue: string; previousValue: string; }) => boolean",
        "description": "Function called to validate the input value"
      },
      "loop": {
        "type": "boolean",
        "description": "Whether to loop the keyboard navigation through the options"
      },
      "positioning": {
        "type": "PositioningOptions",
        "description": "The options used to dynamically position the menu"
      },
      "onInputChange": {
        "type": "(details: { value: string; }) => void",
        "description": "Function called when the input's value changes"
      },
      "onSelect": {
        "type": "(details: Partial<OptionData> & { relatedTarget: HTMLElement; }) => void",
        "description": "Function called when a new option is selected"
      },
      "onHighlight": {
        "type": "(details: Partial<OptionData> & { relatedTarget: HTMLElement; }) => void",
        "description": "Function called when an options is highlighted using the pointer\nor keyboard navigation."
      },
      "onOpen": {
        "type": "() => void",
        "description": "Function called when the popup is opened"
      },
      "onClose": {
        "type": "() => void",
        "description": "Function called when the popup is closed"
      },
      "onInteractOutside": {
        "type": "(event: InteractOutsideEvent) => void",
        "description": "Callback fired when an outside interaction was triggered.\nUseful for preventing blur on combobox when composing it with other components."
      },
      "translations": {
        "type": "IntlTranslations",
        "description": "Specifies the localized strings that identifies the accessibility elements and their states"
      }
    }
  },
  "date-picker": {
    "api": {
      "isFocused": {
        "type": "boolean",
        "description": "Whether the input is focused"
      },
      "isOpen": {
        "type": "boolean",
        "description": "Whether the date picker is open"
      },
      "view": {
        "type": "DateView",
        "description": "The current view of the date picker"
      },
      "matchView": {
        "type": "typeof matchView",
        "description": "Matcher for the current view of the date picker"
      },
      "getDaysInWeek": {
        "type": "(weekIndex: number, from?: DateValue[]",
        "description": "Returns an array of days in the week index counted from the provided start date, or the first visible date if not given."
      },
      "getOffset": {
        "type": "(months: number) => { amount: number; visibleRange: { start: DateValue[][]; }",
        "description": "Returns the offset of the month based on the provided number of months."
      },
      "getMonthDays": {
        "type": "(from?: DateValue[][]",
        "description": "Returns the weeks of the month from the provided date. Represented as an array of arrays of dates."
      },
      "isUnavailable": {
        "type": "(date: DateValue) => boolean",
        "description": "Returns whether the provided date is available (or can be selected)"
      },
      "weeks": {
        "type": "DateValue[][]",
        "description": "The weeks of the month. Represented as an array of arrays of dates."
      },
      "weekDays": {
        "type": "{ value: ZonedDateTime; short: string; long: string; narrow: string; }[]",
        "description": "The days of the week. Represented as an array of strings."
      },
      "visibleRangeText": {
        "type": "{ start: string; end: string; formatted: string; }",
        "description": "The human readable text for the visible range of dates."
      },
      "value": {
        "type": "DateValue[]",
        "description": "The selected date."
      },
      "valueAsDate": {
        "type": "Date[]",
        "description": "The selected date as a Date object."
      },
      "valueAsString": {
        "type": "string[]",
        "description": "The selected date as a string."
      },
      "focusedValue": {
        "type": "DateValue",
        "description": "The focused date."
      },
      "focusedValueAsDate": {
        "type": "Date",
        "description": "The focused date as a Date object."
      },
      "focusedValueAsString": {
        "type": "string",
        "description": "The focused date as a string."
      },
      "selectToday": {
        "type": "() => void",
        "description": "Sets the selected date to today."
      },
      "setValue": {
        "type": "(values: CalendarDate[]) => void",
        "description": "Sets the selected date to the given date."
      },
      "setFocusedValue": {
        "type": "(value: CalendarDate) => void",
        "description": "Sets the focused date to the given date."
      },
      "clearValue": {
        "type": "() => void",
        "description": "Clears the selected date(s)."
      },
      "open": {
        "type": "() => void",
        "description": "Function to open the calendar."
      },
      "close": {
        "type": "() => void",
        "description": "Function to close the calendar."
      },
      "focusMonth": {
        "type": "(month: number) => void",
        "description": "Function to set the selected month."
      },
      "focusYear": {
        "type": "(year: number) => void",
        "description": "Function to set the selected year."
      },
      "visibleRange": {
        "type": "{ start: DateValue; }",
        "description": "The visible range of dates."
      },
      "getYears": {
        "type": "() => { label: string; value: number; }[]",
        "description": "Returns the months of the year"
      },
      "getYearsGrid": {
        "type": "(props?: { columns?: number; }) => { label: string; value: number; }[][]",
        "description": "Returns the years of the decade based on the columns.\nRepresented as an array of arrays of years."
      },
      "getDecade": {
        "type": "() => { start: number; end: number; }",
        "description": "Returns the start and end years of the decade."
      },
      "getMonths": {
        "type": "(props?: { format?: \"short\" | \"long\"; }) => { label: string; value: number; }[]",
        "description": "Returns the months of the year"
      },
      "getMonthsGrid": {
        "type": "(props?: { columns?: number; format?: \"short\" | \"long\"; }) => { label: string; value: number; }[][]",
        "description": "Returns the months of the year based on the columns.\nRepresented as an array of arrays of months."
      },
      "format": {
        "type": "(value: CalendarDate, opts?: Intl.DateTimeFormatOptions) => string",
        "description": "Formats the given date value based on the provided options."
      },
      "setView": {
        "type": "(view: DateView) => void",
        "description": "Sets the view of the date picker."
      },
      "goToNext": {
        "type": "() => void",
        "description": "Goes to the next month/year/decade."
      },
      "goToPrev": {
        "type": "() => void",
        "description": "Goes to the previous month/year/decade."
      },
      "getDayCellState": {
        "type": "(props: DayCellProps) => { isInvalid: boolean; isDisabled: boolean; isSelected: boolean; isUnavailable: boolean; isOutsideRange: boolean; isInRange: boolean; isFirstInRange: boolean; isLastInRange: boolean; isToday: boolean; isWeekend: boolean; formattedDate: string; readonly isFocused: boolean; readonly ariaLabel: string; readonly isSelectable: boolean; }",
        "description": "Returns the state details for a given cell."
      }
    },
    "context": {
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "messages": {
        "type": "IntlMessages",
        "description": "The localized messages to use."
      },
      "ids": {
        "type": "Partial<{ grid(id: string): string; header: string; content: string; cellTrigger(id: string): string; prevTrigger(view: DateView): string; clearTrigger: string; control: string; input: string; trigger: string; monthSelect: string; yearSelect: string; }>",
        "description": "The ids of the elements in the date picker. Useful for composition."
      },
      "name": {
        "type": "string",
        "description": "The `name` attribute of the input element."
      },
      "locale": {
        "type": "string",
        "description": "The locale (BCP 47 language tag) to use when formatting the date."
      },
      "timeZone": {
        "type": "string",
        "description": "The time zone to use"
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the calendar is disabled."
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the calendar is read-only."
      },
      "min": {
        "type": "DateValue",
        "description": "The minimum date that can be selected."
      },
      "max": {
        "type": "DateValue",
        "description": "The maximum date that can be selected."
      },
      "inline": {
        "type": "boolean",
        "description": "Whether the calendar should be displayed inline."
      },
      "value": {
        "type": "DateValue[]",
        "description": "The selected date(s)."
      },
      "focusedValue": {
        "type": "DateValue",
        "description": "The focused date."
      },
      "numOfMonths": {
        "type": "number",
        "description": "The number of months to display."
      },
      "startOfWeek": {
        "type": "number",
        "description": "The first day of the week.\n `0` - Sunday\n `1` - Monday\n `2` - Tuesday\n `3` - Wednesday\n `4` - Thursday\n `5` - Friday\n `6` - Saturday"
      },
      "fixedWeeks": {
        "type": "boolean",
        "description": "Whether the calendar should have a fixed number of weeks.\nThis renders the calendar with 6 weeks instead of 5 or 6."
      },
      "onChange": {
        "type": "(details: { value: DateValue[]; }) => void",
        "description": "Function called when the value changes."
      },
      "onFocusChange": {
        "type": "(details: ChangeDetails<{ focusedValue: DateView; }>) => void",
        "description": "Function called when the focused date changes."
      },
      "onViewChange": {
        "type": "(details: { view: DateView; }) => void",
        "description": "Function called when the view changes."
      },
      "isDateUnavailable": {
        "type": "(date: DateValue, locale: string) => boolean",
        "description": "Returns whether a date of the calendar is available."
      },
      "selectionMode": {
        "type": "SelectionMode",
        "description": "The selection mode of the calendar.\n- `single` - only one date can be selected\n- `multiple` - multiple dates can be selected\n- `range` - a range of dates can be selected"
      },
      "format": {
        "type": "(date: DateValue[]) => string",
        "description": "The format of the date to display in the input."
      },
      "parse": {
        "type": "(value: string) => DateValue[]",
        "description": "The format of the date to display in the input."
      },
      "view": {
        "type": "DateView",
        "description": "The view of the calendar",
        "defaultValue": "\"day\""
      },
      "modal": {
        "type": "boolean",
        "description": "Whether the calendar should be modal. This means that the calendar will\nblock interaction with the rest of the page, and trap focus within it."
      }
    }
  },
  "dialog": {
    "api": {
      "isOpen": {
        "type": "boolean",
        "description": "Whether the dialog is open"
      },
      "open": {
        "type": "() => void",
        "description": "Function to open the dialog"
      },
      "close": {
        "type": "() => void",
        "description": "Function to close the dialog"
      }
    },
    "context": {
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "ids": {
        "type": "Partial<{ trigger: string; container: string; backdrop: string; content: string; closeTrigger: string; title: string; description: string; }>",
        "description": "The ids of the elements in the dialog. Useful for composition."
      },
      "trapFocus": {
        "type": "boolean",
        "description": "Whether to trap focus inside the dialog when it's opened"
      },
      "preventScroll": {
        "type": "boolean",
        "description": "Whether to prevent scrolling behind the dialog when it's opened"
      },
      "modal": {
        "type": "boolean",
        "description": "Whether to prevent pointer interaction outside the element and hide all content below it"
      },
      "initialFocusEl": {
        "type": "HTMLElement | (() => HTMLElement)",
        "description": "Element to receive focus when the dialog is opened"
      },
      "finalFocusEl": {
        "type": "HTMLElement | (() => HTMLElement)",
        "description": "Element to receive focus when the dialog is closed"
      },
      "restoreFocus": {
        "type": "boolean",
        "description": "Whether to restore focus to the element that had focus before the dialog was opened"
      },
      "onClose": {
        "type": "() => void",
        "description": "Callback to be invoked when the dialog is closed"
      },
      "onOpen": {
        "type": "() => void",
        "description": "Callback to be invoked when the dialog is opened"
      },
      "closeOnOutsideClick": {
        "type": "boolean",
        "description": "Whether to close the dialog when the outside is clicked"
      },
      "onOutsideClick": {
        "type": "() => void",
        "description": "Callback to be invoked when the outside is clicked"
      },
      "closeOnEsc": {
        "type": "boolean",
        "description": "Whether to close the dialog when the escape key is pressed"
      },
      "onEsc": {
        "type": "() => void",
        "description": "Callback to be invoked when the escape key is pressed"
      },
      "aria-label": {
        "type": "string",
        "description": "Human readable label for the dialog, in event the dialog title is not rendered"
      },
      "role": {
        "type": "\"dialog\" | \"alertdialog\"",
        "description": "The dialog's role",
        "defaultValue": "\"dialog\""
      },
      "open": {
        "type": "boolean",
        "description": "Whether the dialog is open"
      }
    }
  },
  "editable": {
    "api": {
      "isEditing": {
        "type": "boolean",
        "description": "Whether the editable is in edit mode"
      },
      "isValueEmpty": {
        "type": "boolean",
        "description": "Whether the editable value is empty"
      },
      "value": {
        "type": "string",
        "description": "The current value of the editable"
      },
      "setValue": {
        "type": "(value: string) => void",
        "description": "Function to set the value of the editable"
      },
      "clearValue": {
        "type": "() => void",
        "description": "Function to clear the value of the editable"
      },
      "edit": {
        "type": "() => void",
        "description": "Function to enter edit mode"
      },
      "cancel": {
        "type": "() => void",
        "description": "Function to exit edit mode, and discard any changes"
      },
      "submit": {
        "type": "() => void",
        "description": "Function to exit edit mode, and submit any changes"
      }
    },
    "context": {
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "ids": {
        "type": "Partial<{ root: string; area: string; label: string; preview: string; input: string; controls: string; submitTrigger: string; cancelTrigger: string; editTrigger: string; }>",
        "description": "The ids of the elements in the editable. Useful for composition."
      },
      "invalid": {
        "type": "boolean",
        "description": "Whether the input's value is invalid."
      },
      "name": {
        "type": "string",
        "description": "The name attribute of the editable component. Used for form submission."
      },
      "form": {
        "type": "string",
        "description": "The associate form of the underlying input."
      },
      "autoResize": {
        "type": "boolean",
        "description": "Whether the editable should auto-resize to fit the content."
      },
      "activationMode": {
        "type": "ActivationMode",
        "description": "The activation mode for the preview element.\n\n- \"focus\" - Enter edit mode when the preview element is focused\n- \"dblclick\" - Enter edit mode when the preview element is double-clicked\n- \"none\" - No interaction with the preview element will trigger edit mode.",
        "defaultValue": "\"focus\""
      },
      "submitMode": {
        "type": "SubmitMode",
        "description": "The action that triggers submit in the edit mode:\n\n- \"enter\" - Trigger submit when the enter key is pressed\n- \"blur\" - Trigger submit when the editable is blurred\n- \"none\" - No action will trigger submit. You need to use the submit button\n- \"both\" - Pressing `Enter` and blurring the input will trigger submit",
        "defaultValue": "\"enter\""
      },
      "startWithEditView": {
        "type": "boolean",
        "description": "Whether to start with the edit mode active."
      },
      "selectOnFocus": {
        "type": "boolean",
        "description": "Whether to select the text in the input when it is focused."
      },
      "value": {
        "type": "string",
        "description": "The value of the editable in both edit and preview mode"
      },
      "maxLength": {
        "type": "number",
        "description": "The maximum number of characters allowed in the editable"
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the editable is disabled"
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the editable is readonly"
      },
      "onChange": {
        "type": "(details: { value: string; }) => void",
        "description": "The callback that is called when the editable's value is changed"
      },
      "onCancel": {
        "type": "(details: { value: string; }) => void",
        "description": "The callback that is called when the esc key is pressed or the cancel button is clicked"
      },
      "onSubmit": {
        "type": "(details: { value: string; }) => void",
        "description": "The callback that is called when the editable's value is submitted."
      },
      "onEdit": {
        "type": "() => void",
        "description": "The callback that is called when in the edit mode."
      },
      "onInteractOutside": {
        "type": "(event: InteractOutsideEvent) => void",
        "description": "Callback fired when an outside interaction was triggered.\nUseful for preventing blur on editable when composing it with other components."
      },
      "placeholder": {
        "type": "string | { edit: string; preview: string; }",
        "description": "The placeholder value to show when the `value` is empty"
      },
      "translations": {
        "type": "IntlTranslations",
        "description": "Specifies the localized strings that identifies the accessibility elements and their states"
      },
      "finalFocusEl": {
        "type": "() => HTMLElement",
        "description": "The element that should receive focus when the editable is closed.\nBy default, it will focus on the trigger element."
      }
    }
  },
  "hover-card": {
    "api": {
      "isOpen": {
        "type": "boolean",
        "description": "Whether the hover card is open"
      },
      "open": {
        "type": "() => void",
        "description": "Function to open the hover card"
      },
      "close": {
        "type": "() => void",
        "description": "Function to close the hover card"
      },
      "setPositioning": {
        "type": "(options?: Partial<PositioningOptions>) => void",
        "description": "Function to reposition the popover"
      }
    },
    "context": {
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "ids": {
        "type": "Partial<{ trigger: string; content: string; positioner: string; arrow: string; }>",
        "description": "The ids of the elements in the popover. Useful for composition."
      },
      "onOpen": {
        "type": "VoidFunction",
        "description": "Function invoked when the hover card is opened."
      },
      "onClose": {
        "type": "VoidFunction",
        "description": "Function invoked when the hover card is closed."
      },
      "openDelay": {
        "type": "number",
        "description": "The duration from when the mouse enters the trigger until the hover card opens."
      },
      "closeDelay": {
        "type": "number",
        "description": "The duration from when the mouse leaves the trigger or content until the hover card closes."
      },
      "open": {
        "type": "boolean",
        "description": "Whether the hover card is open"
      },
      "positioning": {
        "type": "PositioningOptions",
        "description": "The user provided options used to position the popover content"
      }
    }
  },
  "menu": {
    "api": {
      "isOpen": {
        "type": "boolean",
        "description": "Whether the menu is open"
      },
      "open": {
        "type": "() => void",
        "description": "Function to open the menu"
      },
      "close": {
        "type": "() => void",
        "description": "Function to close the menu"
      },
      "highlightedId": {
        "type": "string",
        "description": "The id of the currently highlighted menuitem"
      },
      "setHighlightedId": {
        "type": "(id: string) => void",
        "description": "Function to set the highlighted menuitem"
      },
      "setParent": {
        "type": "(parent: Service) => void",
        "description": "Function to register a parent menu. This is used for submenus"
      },
      "setChild": {
        "type": "(child: Service) => void",
        "description": "Function to register a child menu. This is used for submenus"
      },
      "value": {
        "type": "Record<string, string | string[]>",
        "description": "The value of the menu options item"
      },
      "setValue": {
        "type": "(name: string, value: any) => void",
        "description": "Function to set the value of the menu options item"
      },
      "isOptionChecked": {
        "type": "(opts: OptionItemProps) => boolean",
        "description": "Function to check if an option is checked"
      },
      "setPositioning": {
        "type": "(options?: Partial<PositioningOptions>) => void",
        "description": "Function to reposition the popover"
      }
    },
    "context": {
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "ids": {
        "type": "Partial<{ trigger: string; contextTrigger: string; content: string; label(id: string): string; group(id: string): string; positioner: string; arrow: string; }>",
        "description": "The ids of the elements in the menu. Useful for composition."
      },
      "value": {
        "type": "Record<string, string | string[]>",
        "description": "The values of radios and checkboxes in the menu."
      },
      "onValueChange": {
        "type": "(details: { name: string; value: string | string[]; }) => void",
        "description": "Callback to be called when the menu values change (for radios and checkboxes)."
      },
      "highlightedId": {
        "type": "string",
        "description": "The `id` of the active menu item."
      },
      "onSelect": {
        "type": "(details: { value: string; }) => void",
        "description": "Function called when a menu item is selected."
      },
      "anchorPoint": {
        "type": "Point",
        "description": "The positioning point for the menu. Can be set by the context menu trigger or the button trigger."
      },
      "loop": {
        "type": "boolean",
        "description": "Whether to loop the keyboard navigation."
      },
      "positioning": {
        "type": "PositioningOptions",
        "description": "The options used to dynamically position the menu"
      },
      "closeOnSelect": {
        "type": "boolean",
        "description": "Whether to close the menu when an option is selected"
      },
      "aria-label": {
        "type": "string",
        "description": "The accessibility label for the menu"
      },
      "onOpen": {
        "type": "() => void",
        "description": "Function called when the menu is opened"
      },
      "onClose": {
        "type": "() => void",
        "description": "Function called when the menu is closed"
      }
    }
  },
  "number-input": {
    "api": {
      "isFocused": {
        "type": "boolean",
        "description": "Whether the input is focused."
      },
      "isInvalid": {
        "type": "boolean",
        "description": "Whether the input is invalid."
      },
      "isValueEmpty": {
        "type": "boolean",
        "description": "Whether the input value is empty."
      },
      "value": {
        "type": "string",
        "description": "The formatted value of the input."
      },
      "valueAsNumber": {
        "type": "number",
        "description": "The value of the input as a number."
      },
      "setValue": {
        "type": "(value: string | number) => void",
        "description": "Function to set the value of the input."
      },
      "clearValue": {
        "type": "() => void",
        "description": "Function to clear the value of the input."
      },
      "increment": {
        "type": "() => void",
        "description": "Function to increment the value of the input by the step."
      },
      "decrement": {
        "type": "() => void",
        "description": "Function to decrement the value of the input by the step."
      },
      "setToMax": {
        "type": "() => void",
        "description": "Function to set the value of the input to the max."
      },
      "setToMin": {
        "type": "() => void",
        "description": "Function to set the value of the input to the min."
      },
      "focus": {
        "type": "() => void",
        "description": "Function to focus the input."
      },
      "blur": {
        "type": "() => void",
        "description": "Function to blur the input."
      }
    },
    "context": {
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "ids": {
        "type": "Partial<{ root: string; label: string; input: string; incrementTrigger: string; decrementTrigger: string; scrubber: string; }>",
        "description": "The ids of the elements in the number input. Useful for composition."
      },
      "name": {
        "type": "string",
        "description": "The name attribute of the number input. Useful for form submission."
      },
      "form": {
        "type": "string",
        "description": "The associate form of the input element."
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the number input is disabled."
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the number input is readonly"
      },
      "invalid": {
        "type": "boolean",
        "description": "Whether the number input value is invalid."
      },
      "pattern": {
        "type": "string",
        "description": "The pattern used to check the <input> element's value against",
        "defaultValue": "\"[0-9]*(.[0-9]+)?\""
      },
      "value": {
        "type": "string",
        "description": "The value of the input"
      },
      "min": {
        "type": "number",
        "description": "The minimum value of the number input"
      },
      "max": {
        "type": "number",
        "description": "The maximum value of the number input"
      },
      "step": {
        "type": "number",
        "description": "The amount to increment or decrement the value by"
      },
      "allowMouseWheel": {
        "type": "boolean",
        "description": "Whether to allow mouse wheel to change the value"
      },
      "allowOverflow": {
        "type": "boolean",
        "description": "Whether to allow the value overflow the min/max range",
        "defaultValue": "true"
      },
      "validateCharacter": {
        "type": "(char: string) => boolean",
        "description": "Whether the pressed key should be allowed in the input.\nThe default behavior is to allow DOM floating point characters defined by /^[Ee0-9+\\-.]$/"
      },
      "clampValueOnBlur": {
        "type": "boolean",
        "description": "Whether to clamp the value when the input loses focus (blur)",
        "defaultValue": "true"
      },
      "focusInputOnChange": {
        "type": "boolean",
        "description": "Whether to focus input when the value changes",
        "defaultValue": "true"
      },
      "translations": {
        "type": "IntlTranslations",
        "description": "Specifies the localized strings that identifies the accessibility elements and their states"
      },
      "parse": {
        "type": "(value: string) => string",
        "description": "If using a custom display format, this converts the custom format to a format `parseFloat` understands."
      },
      "format": {
        "type": "(value: string) => string | number",
        "description": "If using a custom display format, this converts the default format to the custom format."
      },
      "inputMode": {
        "type": "\"text\" | \"tel\" | \"numeric\" | \"decimal\"",
        "description": "Hints at the type of data that might be entered by the user. It also determines\nthe type of keyboard shown to the user on mobile devices",
        "defaultValue": "\"decimal\""
      },
      "onChange": {
        "type": "(details: Value) => void",
        "description": "Function invoked when the value changes"
      },
      "onInvalid": {
        "type": "(details: Value & { reason: ValidityState; }) => void",
        "description": "Function invoked when the value overflows or underflows the min/max range"
      },
      "onFocus": {
        "type": "(details: Value & { srcElement: HTMLElement; }) => void",
        "description": "Function invoked when the number input is focused"
      },
      "onBlur": {
        "type": "(details: Value) => void",
        "description": "The value of the input when it is blurred"
      },
      "minFractionDigits": {
        "type": "number",
        "description": "The minimum number of fraction digits to use. Possible values are from 0 to 20"
      },
      "maxFractionDigits": {
        "type": "number",
        "description": "The maximum number of fraction digits to use. Possible values are from 0 to 20;"
      },
      "spinOnPress": {
        "type": "boolean",
        "description": "Whether to spin the value when the increment/decrement button is pressed"
      }
    }
  },
  "pagination": {
    "api": {
      "page": {
        "type": "number",
        "description": "The current page."
      },
      "totalPages": {
        "type": "number",
        "description": "The total number of pages."
      },
      "pages": {
        "type": "PaginationRange",
        "description": "The page range. Represented as an array of page numbers (including ellipsis)"
      },
      "previousPage": {
        "type": "number",
        "description": "The previous page."
      },
      "nextPage": {
        "type": "number",
        "description": "The next page."
      },
      "pageRange": {
        "type": "{ start: number; end: number; }",
        "description": "The page range. Represented as an object with `start` and `end` properties."
      },
      "slice": {
        "type": "<T_1>(data: T_1[]) => T_1[]",
        "description": "Function to slice an array of data based on the current page."
      },
      "isFirstPage": {
        "type": "boolean",
        "description": "Whether the current page is the first page."
      },
      "isLastPage": {
        "type": "boolean",
        "description": "Whether the current page is the last page."
      },
      "setCount": {
        "type": "(count: number) => void",
        "description": "Function to set the total number of pages."
      },
      "setPageSize": {
        "type": "(size: number) => void",
        "description": "Function to set the page size."
      },
      "setPage": {
        "type": "(page: number) => void",
        "description": "Function to set the current page."
      }
    },
    "context": {
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "ids": {
        "type": "Partial<{ root: string; ellipsis(index: number): string; prevPageTrigger: string; nextPageTrigger: string; pageTrigger(page: number): string; }>",
        "description": "The ids of the elements in the accordion. Useful for composition."
      },
      "translations": {
        "type": "IntlTranslations",
        "description": "Specifies the localized strings that identifies the accessibility elements and their states"
      },
      "count": {
        "type": "number",
        "description": "Total number of data items"
      },
      "pageSize": {
        "type": "number",
        "description": "Number of data items per page"
      },
      "siblingCount": {
        "type": "number",
        "description": "Number of pages to show beside active page"
      },
      "page": {
        "type": "number",
        "description": "The active page"
      },
      "onChange": {
        "type": "(details: { page: number; pageSize: number; srcElement: HTMLElement; }) => void",
        "description": "Called when the page number is changed, and it takes the resulting page number argument"
      },
      "type": {
        "type": "\"button\" | \"link\"",
        "description": "The type of the trigger element",
        "defaultValue": "\"button\""
      }
    }
  },
  "pin-input": {
    "api": {
      "value": {
        "type": "string[]",
        "description": "The value of the input as an array of strings."
      },
      "valueAsString": {
        "type": "string",
        "description": "The value of the input as a string."
      },
      "isValueComplete": {
        "type": "boolean",
        "description": "Whether all inputs are filled."
      },
      "setValue": {
        "type": "(value: string[]) => void",
        "description": "Function to set the value of the inputs."
      },
      "clearValue": {
        "type": "() => void",
        "description": "Function to clear the value of the inputs."
      },
      "setValueAtIndex": {
        "type": "(index: number, value: string) => void",
        "description": "Function to set the value of the input at a specific index."
      },
      "focus": {
        "type": "() => void",
        "description": "Function to focus the pin-input. This will focus the first input."
      }
    },
    "context": {
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "name": {
        "type": "string",
        "description": "The name of the input element. Useful for form submission."
      },
      "form": {
        "type": "string",
        "description": "The associate form of the underlying input element."
      },
      "pattern": {
        "type": "string",
        "description": "The regular expression that the user-entered input value is checked against."
      },
      "ids": {
        "type": "Partial<{ root: string; hiddenInput: string; label: string; control: string; input(id: string): string; }>",
        "description": "The ids of the elements in the pin input. Useful for composition."
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the inputs are disabled"
      },
      "placeholder": {
        "type": "string",
        "description": "The placeholder text for the input"
      },
      "autoFocus": {
        "type": "boolean",
        "description": "Whether to auto-focus the first input."
      },
      "invalid": {
        "type": "boolean",
        "description": "Whether the pin input is in the invalid state"
      },
      "otp": {
        "type": "boolean",
        "description": "If `true`, the pin input component signals to its fields that they should\nuse `autocomplete=\"one-time-code\"`."
      },
      "value": {
        "type": "string[]",
        "description": "The value of the the pin input."
      },
      "type": {
        "type": "\"alphanumeric\" | \"numeric\" | \"alphabetic\"",
        "description": "The type of value the pin-input should allow"
      },
      "onComplete": {
        "type": "(details: { value: string[]; valueAsString: string; }) => void",
        "description": "Function called when all inputs have valid values"
      },
      "onChange": {
        "type": "(details: { value: string[]; }) => void",
        "description": "Function called on input change"
      },
      "onInvalid": {
        "type": "(details: { value: string; index: number; }) => void",
        "description": "Function called when an invalid value is entered"
      },
      "mask": {
        "type": "boolean",
        "description": "If `true`, the input's value will be masked just like `type=password`"
      },
      "blurOnComplete": {
        "type": "boolean",
        "description": "Whether to blur the input when the value is complete"
      },
      "selectOnFocus": {
        "type": "boolean",
        "description": "Whether to select input value when input is focused"
      },
      "translations": {
        "type": "IntlTranslations",
        "description": "Specifies the localized strings that identifies the accessibility elements and their states"
      }
    }
  },
  "popover": {
    "api": {
      "portalled": {
        "type": "boolean",
        "description": "Whether the popover is portalled"
      },
      "isOpen": {
        "type": "boolean",
        "description": "Whether the popover is open"
      },
      "open": {
        "type": "() => void",
        "description": "Function to open the popover"
      },
      "close": {
        "type": "() => void",
        "description": "Function to close the popover"
      },
      "setPositioning": {
        "type": "(options?: Partial<PositioningOptions>) => void",
        "description": "Function to reposition the popover"
      }
    },
    "context": {
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "ids": {
        "type": "Partial<{ anchor: string; trigger: string; content: string; title: string; description: string; closeTrigger: string; positioner: string; arrow: string; }>",
        "description": "The ids of the elements in the popover. Useful for composition."
      },
      "modal": {
        "type": "boolean",
        "description": "Whether the popover should be modal. When set to `true`:\n- interaction with outside elements will be disabled\n- only popover content will be visible to screen readers\n- scrolling is blocked\n- focus is trapped within the popover",
        "defaultValue": "false"
      },
      "portalled": {
        "type": "boolean",
        "description": "Whether the popover is rendered in a portal"
      },
      "autoFocus": {
        "type": "boolean",
        "description": "Whether to automatically set focus on the first focusable\ncontent within the popover when opened."
      },
      "initialFocusEl": {
        "type": "HTMLElement | (() => HTMLElement)",
        "description": "The element to focus on when the popover is opened."
      },
      "closeOnInteractOutside": {
        "type": "boolean",
        "description": "Whether to close the popover when the user clicks outside of the popover."
      },
      "closeOnEsc": {
        "type": "boolean",
        "description": "Whether to close the popover when the escape key is pressed."
      },
      "onClose": {
        "type": "VoidFunction",
        "description": "Function invoked when the popover is closed"
      },
      "onOpen": {
        "type": "VoidFunction",
        "description": "Function invoked when the popover is opened"
      },
      "positioning": {
        "type": "PositioningOptions",
        "description": "The user provided options used to position the popover content"
      },
      "open": {
        "type": "boolean",
        "description": "Whether the popover is open"
      }
    }
  },
  "presence": {
    "api": {
      "isPresent": {
        "type": "boolean",
        "description": "Whether the node is present in the DOM."
      },
      "setNode": {
        "type": "(node: HTMLElement) => void",
        "description": "Function to set the node (as early as possible)"
      }
    },
    "context": {}
  },
  "pressable": {
    "api": {
      "isPressed": {
        "type": "boolean",
        "description": "Whether the element is pressed."
      }
    },
    "context": {
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "onPress": {
        "type": "(event: PressEvent) => void",
        "description": "Handler that is called when the press is released over the target."
      },
      "onPressStart": {
        "type": "(event: PressEvent) => void",
        "description": "Handler that is called when a press interaction starts."
      },
      "onPressEnd": {
        "type": "(event: PressEvent) => void",
        "description": "Handler that is called when a press interaction ends, either\nover the target or when the pointer leaves the target."
      },
      "onPressUp": {
        "type": "(event: PressEvent) => void",
        "description": "Handler that is called when a press is released over the target, regardless of\nwhether it started on the target or not."
      },
      "onLongPress": {
        "type": "(event: PressEvent) => void",
        "description": "Handler that is called when the element has been pressed for 500 milliseconds"
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the element is disabled"
      },
      "preventFocusOnPress": {
        "type": "boolean",
        "description": "Whether the target should not receive focus on press."
      },
      "cancelOnPointerExit": {
        "type": "boolean",
        "description": "Whether press events should be canceled when the pointer leaves the target while pressed.\n\nBy default, this is `false`, which means if the pointer returns back over the target while\nstill pressed, onPressStart will be fired again.\n\nIf set to `true`, the press is canceled when the pointer leaves the target and\nonPressStart will not be fired if the pointer returns."
      },
      "allowTextSelectionOnPress": {
        "type": "boolean",
        "description": "Whether text selection should be enabled on the pressable element."
      },
      "longPressDelay": {
        "type": "number",
        "description": "The amount of time (in milliseconds) to wait before firing the `onLongPress` event."
      }
    }
  },
  "radio-group": {
    "api": {
      "value": {
        "type": "string",
        "description": "The current value of the radio group"
      },
      "setValue": {
        "type": "(value: string) => void",
        "description": "Function to set the value of the radio group"
      },
      "clearValue": {
        "type": "() => void",
        "description": "Function to clear the value of the radio group"
      },
      "focus": {
        "type": "() => void",
        "description": "Function to focus the radio group"
      },
      "blur": {
        "type": "() => void",
        "description": "Function to blur the currently focused radio input in the radio group"
      },
      "getRadioState": {
        "type": "<T_1 extends RadioProps>(props: T_1) => { isInteractive: boolean; isReadOnly: boolean; isInvalid: boolean; isDisabled: boolean; isChecked: boolean; isFocused: boolean; isHovered: boolean; isActive: boolean; }",
        "description": "Returns the state details of a radio input"
      }
    },
    "context": {
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "ids": {
        "type": "Partial<{ root: string; label: string; indicator: string; radio(value: string): string; radioLabel(value: string): string; radioControl(value: string): string; radioInput(value: string): string; }>",
        "description": "The ids of the elements in the radio. Useful for composition."
      },
      "value": {
        "type": "string",
        "description": "The value of the checked radio"
      },
      "name": {
        "type": "string",
        "description": "The name of the input fields in the radio\n(Useful for form submission)."
      },
      "form": {
        "type": "string",
        "description": "The associate form of the underlying input."
      },
      "disabled": {
        "type": "boolean",
        "description": "If `true`, the radio group will be disabled"
      },
      "readOnly": {
        "type": "boolean",
        "description": "If `true`, the radio group will be readonly"
      },
      "onChange": {
        "type": "(details: { value: string; }) => void",
        "description": "Function called once a radio is checked"
      },
      "orientation": {
        "type": "\"horizontal\" | \"vertical\"",
        "description": "Orientation of the radio group"
      }
    }
  },
  "range-slider": {
    "api": {
      "value": {
        "type": "number[]",
        "description": "The value of the slider."
      },
      "isDragging": {
        "type": "boolean",
        "description": "Whether the slider is being dragged."
      },
      "isFocused": {
        "type": "boolean",
        "description": "Whether the slider is focused."
      },
      "setValue": {
        "type": "(value: number[]) => void",
        "description": "Function to set the value of the slider."
      },
      "getThumbValue": {
        "type": "(index: number) => number",
        "description": "Returns the value of the thumb at the given index."
      },
      "setThumbValue": {
        "type": "(index: number, value: number) => void",
        "description": "Sets the value of the thumb at the given index."
      },
      "getValuePercent": {
        "type": "(value: number) => number",
        "description": "Returns the percent of the thumb at the given index."
      },
      "getPercentValue": {
        "type": "(percent: number) => number",
        "description": "Returns the value of the thumb at the given percent."
      },
      "getThumbPercent": {
        "type": "(index: number) => number",
        "description": "Returns the percent of the thumb at the given index."
      },
      "setThumbPercent": {
        "type": "(index: number, percent: number) => void",
        "description": "Sets the percent of the thumb at the given index."
      },
      "getThumbMin": {
        "type": "(index: number) => number",
        "description": "Returns the min value of the thumb at the given index."
      },
      "getThumbMax": {
        "type": "(index: number) => number",
        "description": "Returns the max value of the thumb at the given index."
      },
      "increment": {
        "type": "(index: number) => void",
        "description": "Function to increment the value of the slider at the given index."
      },
      "decrement": {
        "type": "(index: number) => void",
        "description": "Function to decrement the value of the slider at the given index."
      },
      "focus": {
        "type": "() => void",
        "description": "Function to focus the slider. This focuses the first thumb."
      }
    },
    "context": {
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "ids": {
        "type": "Partial<{ root: string; thumb(index: number): string; control: string; track: string; range: string; label: string; output: string; marker(index: number): string; }>",
        "description": "The ids of the elements in the range slider. Useful for composition."
      },
      "aria-label": {
        "type": "string[]",
        "description": "The aria-label of each slider thumb. Useful for providing an accessible name to the slider"
      },
      "aria-labelledby": {
        "type": "string[]",
        "description": "The `id` of the elements that labels each slider thumb. Useful for providing an accessible name to the slider"
      },
      "name": {
        "type": "string",
        "description": "The name associated with each slider thumb (when used in a form)"
      },
      "form": {
        "type": "string",
        "description": "The associate form of the underlying input element."
      },
      "value": {
        "type": "number[]",
        "description": "The value of the range slider"
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the slider is disabled"
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the slider is read-only"
      },
      "invalid": {
        "type": "boolean",
        "description": "Whether the slider is invalid"
      },
      "onChange": {
        "type": "(details: { value: number[]; }) => void",
        "description": "Function invoked when the value of the slider changes"
      },
      "onChangeStart": {
        "type": "(details: { value: number[]; }) => void",
        "description": "Function invoked when the slider value change is started"
      },
      "onChangeEnd": {
        "type": "(details: { value: number[]; }) => void",
        "description": "Function invoked when the slider value change is done"
      },
      "getAriaValueText": {
        "type": "(value: number, index: number) => string",
        "description": "Function that returns a human readable value for the slider thumb"
      },
      "min": {
        "type": "number",
        "description": "The minimum value of the slider"
      },
      "max": {
        "type": "number",
        "description": "The maximum value of the slider"
      },
      "step": {
        "type": "number",
        "description": "The step value of the slider"
      },
      "minStepsBetweenThumbs": {
        "type": "number",
        "description": "The minimum permitted steps between multiple thumbs."
      },
      "orientation": {
        "type": "\"vertical\" | \"horizontal\"",
        "description": "The orientation of the slider"
      },
      "thumbAlignment": {
        "type": "\"contain\" | \"center\"",
        "description": "The alignment of the slider thumb relative to the track\n- `center`: the thumb will extend beyond the bounds of the slider track.\n- `contain`: the thumb will be contained within the bounds of the track."
      }
    }
  },
  "rating-group": {
    "api": {
      "setValue": {
        "type": "(value: number) => void",
        "description": "Sets the value of the rating group"
      },
      "clearValue": {
        "type": "() => void",
        "description": "Clears the value of the rating group"
      },
      "isHovering": {
        "type": "boolean",
        "description": "Whether the rating group is being hovered"
      },
      "value": {
        "type": "number",
        "description": "The current value of the rating group"
      },
      "hoveredValue": {
        "type": "number",
        "description": "The value of the currently hovered rating"
      },
      "size": {
        "type": "number",
        "description": "The maximum value of the rating group"
      },
      "sizeArray": {
        "type": "number[]",
        "description": "The array of rating values. Returns an array of numbers from 1 to the max value."
      },
      "getRatingState": {
        "type": "(props: ItemState",
        "description": "Returns the state of a rating item"
      }
    },
    "context": {
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "ids": {
        "type": "Partial<{ root: string; label: string; hiddenInput: string; control: string; rating(id: string): string; }>",
        "description": "The ids of the elements in the rating. Useful for composition."
      },
      "translations": {
        "type": "IntlTranslations",
        "description": "Specifies the localized strings that identifies the accessibility elements and their states"
      },
      "max": {
        "type": "number",
        "description": "The maximum rating value."
      },
      "name": {
        "type": "string",
        "description": "The name attribute of the rating element (used in forms)."
      },
      "form": {
        "type": "string",
        "description": "The associate form of the underlying input element."
      },
      "value": {
        "type": "number",
        "description": "The current rating value."
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the rating is readonly."
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the rating is disabled."
      },
      "allowHalf": {
        "type": "boolean",
        "description": "Whether to allow half stars."
      },
      "autoFocus": {
        "type": "boolean",
        "description": "Whether to autofocus the rating."
      },
      "onChange": {
        "type": "(details: { value: number; }) => void",
        "description": "Function to be called when the rating value changes."
      },
      "onHover": {
        "type": "(details: { value: number; }) => void",
        "description": "Function to be called when the rating value is hovered."
      }
    }
  },
  "select": {
    "api": {
      "isOpen": {
        "type": "boolean",
        "description": "Whether the select is open"
      },
      "highlightedOption": {
        "type": "Option",
        "description": "The currently highlighted option"
      },
      "selectedOption": {
        "type": "Option",
        "description": "The currently selected option"
      },
      "focus": {
        "type": "() => void",
        "description": "Function to focus the select"
      },
      "open": {
        "type": "() => void",
        "description": "Function to open the select"
      },
      "close": {
        "type": "() => void",
        "description": "Function to close the select"
      },
      "setSelectedOption": {
        "type": "(value: Option) => void",
        "description": "Function to set the selected option"
      },
      "setHighlightedOption": {
        "type": "(value: Option) => void",
        "description": "Function to set the highlighted option"
      },
      "clearSelectedOption": {
        "type": "() => void",
        "description": "Function to clear the selected option"
      },
      "getOptionState": {
        "type": "(props: OptionProps) => { isDisabled: boolean; isHighlighted: boolean; isSelected: boolean; }",
        "description": "Returns the state details of an option"
      }
    },
    "context": {
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "ids": {
        "type": "Partial<{ content: string; trigger: string; label: string; option(id: string | number): string; hiddenSelect: string; positioner: string; optionGroup(id: string | number): string; optionGroupLabel(id: string | number): string; }>",
        "description": "The ids of the elements in the accordion. Useful for composition."
      },
      "name": {
        "type": "string",
        "description": "The `name` attribute of the underlying select."
      },
      "form": {
        "type": "string",
        "description": "The associate form of the underlying select."
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the select is disabled"
      },
      "invalid": {
        "type": "boolean",
        "description": "Whether the select is invalid"
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the select is read-only"
      },
      "closeOnSelect": {
        "type": "boolean",
        "description": "Whether the select should close after an option is selected"
      },
      "selectOnTab": {
        "type": "boolean",
        "description": "Whether to select the highlighted option when the user presses Tab,\nand the menu is open."
      },
      "onHighlight": {
        "type": "(details: Option) => void",
        "description": "The callback fired when the highlighted option changes."
      },
      "onChange": {
        "type": "(details: Option) => void",
        "description": "The callback fired when the selected option changes."
      },
      "onOpen": {
        "type": "() => void",
        "description": "The callback fired when the menu is opened."
      },
      "onClose": {
        "type": "() => void",
        "description": "The callback fired when the menu is closed."
      },
      "onInteractOutside": {
        "type": "(event: InteractOutsideEvent) => void",
        "description": "Callback fired when an outside interaction was triggered.\nUseful for preventing blur on select when composing it with other components."
      },
      "positioning": {
        "type": "PositioningOptions",
        "description": "The positioning options of the menu."
      },
      "selectedOption": {
        "type": "Option",
        "description": "The selected option"
      },
      "highlightedOption": {
        "type": "Option",
        "description": "The highlighted option"
      },
      "loop": {
        "type": "boolean",
        "description": "Whether to loop the keyboard navigation through the options"
      }
    }
  },
  "slider": {
    "api": {
      "isFocused": {
        "type": "boolean",
        "description": "Whether the slider is focused."
      },
      "isDragging": {
        "type": "boolean",
        "description": "Whether the slider is being dragged."
      },
      "value": {
        "type": "number",
        "description": "The value of the slider."
      },
      "percent": {
        "type": "number",
        "description": "The value of the slider as a percent."
      },
      "setValue": {
        "type": "(value: number) => void",
        "description": "Function to set the value of the slider."
      },
      "getPercentValue": {
        "type": "(percent: number) => number",
        "description": "Returns the value of the slider at the given percent."
      },
      "getValuePercent": {
        "type": "(value: number) => number",
        "description": "Returns the percent of the slider at the given value."
      },
      "focus": {
        "type": "() => void",
        "description": "Function to focus the slider."
      },
      "increment": {
        "type": "() => void",
        "description": "Function to increment the value of the slider by the step."
      },
      "decrement": {
        "type": "() => void",
        "description": "Function to decrement the value of the slider by the step."
      }
    },
    "context": {
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "ids": {
        "type": "Partial<{ root: string; thumb: string; control: string; track: string; range: string; label: string; output: string; hiddenInput: string; }>",
        "description": "The ids of the elements in the slider. Useful for composition."
      },
      "value": {
        "type": "number",
        "description": "The value of the slider"
      },
      "name": {
        "type": "string",
        "description": "The name associated with the slider (when used in a form)"
      },
      "form": {
        "type": "string",
        "description": "The associate form of the underlying input element."
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the slider is disabled"
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the slider is read-only"
      },
      "invalid": {
        "type": "boolean",
        "description": "Whether the slider value is invalid"
      },
      "min": {
        "type": "number",
        "description": "The minimum value of the slider"
      },
      "max": {
        "type": "number",
        "description": "The maximum value of the slider"
      },
      "step": {
        "type": "number",
        "description": "The step value of the slider"
      },
      "orientation": {
        "type": "\"vertical\" | \"horizontal\"",
        "description": "The orientation of the slider"
      },
      "origin": {
        "type": "\"start\" | \"center\"",
        "description": "- \"start\": Useful when the value represents an absolute value\n- \"center\": Useful when the value represents an offset (relative)"
      },
      "aria-label": {
        "type": "string",
        "description": "The aria-label of the slider. Useful for providing an accessible name to the slider"
      },
      "aria-labelledby": {
        "type": "string",
        "description": "The `id` of the element that labels the slider. Useful for providing an accessible name to the slider"
      },
      "focusThumbOnChange": {
        "type": "boolean",
        "description": "Whether to focus the slider thumb after interaction (scrub and keyboard)"
      },
      "getAriaValueText": {
        "type": "(value: number) => string",
        "description": "Function that returns a human readable value for the slider"
      },
      "onChange": {
        "type": "(details: { value: number; }) => void",
        "description": "Function invoked when the value of the slider changes"
      },
      "onChangeEnd": {
        "type": "(details: { value: number; }) => void",
        "description": "Function invoked when the slider value change is done"
      },
      "onChangeStart": {
        "type": "(details: { value: number; }) => void",
        "description": "Function invoked when the slider value change is started"
      },
      "thumbAlignment": {
        "type": "\"center\" | \"contain\"",
        "description": "The alignment of the slider thumb relative to the track\n- `center`: the thumb will extend beyond the bounds of the slider track.\n- `contain`: the thumb will be contained within the bounds of the track."
      }
    }
  },
  "splitter": {
    "api": {
      "isFocused": {
        "type": "boolean",
        "description": "Whether the splitter is focused."
      },
      "isDragging": {
        "type": "boolean",
        "description": "Whether the splitter is being dragged."
      },
      "bounds": {
        "type": "{ min: number; max: number; }",
        "description": "The bounds of the currently dragged splitter handle."
      },
      "setToMinSize": {
        "type": "(id: PanelId) => void",
        "description": "Function to set a panel to its minimum size."
      },
      "setToMaxSize": {
        "type": "(id: PanelId) => void",
        "description": "Function to set a panel to its maximum size."
      },
      "setSize": {
        "type": "(id: PanelId, size: number) => void",
        "description": "Function to set the size of a panel."
      },
      "getResizeTriggerState": {
        "type": "(props: ResizeTriggerProps) => { isDisabled: boolean; isFocused: boolean; panelIds: string[]; min: number; max: number; value: number; }",
        "description": "Returns the state details for a resize trigger."
      }
    },
    "context": {
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "orientation": {
        "type": "\"horizontal\" | \"vertical\"",
        "description": "The orientation of the splitter. Can be `horizontal` or `vertical`"
      },
      "size": {
        "type": "PanelSizeData[]",
        "description": "The size data of the panels"
      },
      "onResize": {
        "type": "(details: ResizeDetails) => void",
        "description": "Function called when the splitter is resized."
      },
      "onResizeStart": {
        "type": "(details: ResizeDetails) => void",
        "description": "Function called when the splitter resize starts."
      },
      "onResizeEnd": {
        "type": "(details: ResizeDetails) => void",
        "description": "Function called when the splitter resize ends."
      },
      "ids": {
        "type": "Partial<{ root: string; resizeTrigger(id: string): string; toggleTrigger(id: string): string; label(id: string): string; panel(id: string | number): string; }>",
        "description": "The ids of the elements in the splitter. Useful for composition."
      }
    }
  },
  "switch": {
    "api": {
      "isChecked": {
        "type": "boolean",
        "description": "Whether the checkbox is checked"
      },
      "isDisabled": {
        "type": "boolean",
        "description": "Whether the checkbox is disabled"
      },
      "isFocused": {
        "type": "boolean",
        "description": "Whether the checkbox is focused"
      },
      "setChecked": {
        "type": "(checked: boolean) => void",
        "description": "Function to set the checked state of the switch."
      },
      "toggleChecked": {
        "type": "() => void",
        "description": "Function to toggle the checked state of the checkbox"
      }
    },
    "context": {
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "ids": {
        "type": "Partial<{ root: string; input: string; control: string; label: string; thumb: string; }>",
        "description": "The ids of the elements in the switch. Useful for composition."
      },
      "label": {
        "type": "string",
        "description": "Specifies the localized strings that identifies the accessibility elements and their states"
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the switch is disabled."
      },
      "focusable": {
        "type": "boolean",
        "description": "If `true` and `disabled` is passed, the switch will\nremain tabbable but not interactive"
      },
      "readOnly": {
        "type": "boolean",
        "description": "If `true`, the switch will be readonly"
      },
      "invalid": {
        "type": "boolean",
        "description": "If `true`, the switch is marked as invalid."
      },
      "required": {
        "type": "boolean",
        "description": "If `true`, the switch input is marked as required,"
      },
      "onChange": {
        "type": "(details: { checked: boolean; }) => void",
        "description": "Function to call when the switch is clicked."
      },
      "checked": {
        "type": "boolean",
        "description": "Whether the switch is checked."
      },
      "name": {
        "type": "string",
        "description": "The name of the input field in a switch\n(Useful for form submission)."
      },
      "form": {
        "type": "string",
        "description": "The id of the form that the switch belongs to"
      },
      "value": {
        "type": "string | number",
        "description": "The value of switch input. Useful for form submission.",
        "defaultValue": "\"on\""
      }
    }
  },
  "tabs": {
    "api": {
      "value": {
        "type": "string",
        "description": "The current value of the tabs."
      },
      "focusedValue": {
        "type": "string",
        "description": "The value of the tab that is currently focused."
      },
      "previousValues": {
        "type": "string[]",
        "description": "The previous values of the tabs in sequence of selection."
      },
      "setValue": {
        "type": "(value: string) => void",
        "description": "Sets the value of the tabs."
      },
      "clearValue": {
        "type": "() => void",
        "description": "Clears the value of the tabs."
      },
      "setIndicatorRect": {
        "type": "(id: string) => void",
        "description": "Sets the indicator rect to the tab with the given id."
      }
    },
    "context": {
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "ids": {
        "type": "Partial<{ root: string; trigger: string; tablist: string; contentGroup: string; content: string; indicator: string; }>",
        "description": "The ids of the elements in the tabs. Useful for composition."
      },
      "translations": {
        "type": "IntlTranslations",
        "description": "Specifies the localized strings that identifies the accessibility elements and their states"
      },
      "loop": {
        "type": "boolean",
        "description": "Whether the keyboard navigation will loop from last tab to first, and vice versa.",
        "defaultValue": "true"
      },
      "value": {
        "type": "string",
        "description": "The selected tab id"
      },
      "orientation": {
        "type": "\"horizontal\" | \"vertical\"",
        "description": "The orientation of the tabs. Can be `horizontal` or `vertical`\n- `horizontal`: only left and right arrow key navigation will work.\n- `vertical`: only up and down arrow key navigation will work.",
        "defaultValue": "\"horizontal\""
      },
      "activationMode": {
        "type": "\"manual\" | \"automatic\"",
        "description": "The activation mode of the tabs. Can be `manual` or `automatic`\n- `manual`: Tabs are activated when clicked or press `enter` key.\n- `automatic`: Tabs are activated when receiving focus",
        "defaultValue": "\"automatic\""
      },
      "onChange": {
        "type": "(details: { value: string; }) => void",
        "description": "Callback to be called when the selected/active tab changes"
      },
      "onFocus": {
        "type": "(details: { value: string; }) => void",
        "description": "Callback to be called when the focused tab changes"
      },
      "onDelete": {
        "type": "(details: { value: string; }) => void",
        "description": "Callback to be called when a tab's close button is clicked"
      }
    }
  },
  "tags-input": {
    "api": {
      "isEmpty": {
        "type": "boolean",
        "description": "Whether the tags are empty"
      },
      "inputValue": {
        "type": "string",
        "description": "The value of the tags entry input."
      },
      "value": {
        "type": "string[]",
        "description": "The value of the tags as an array of strings."
      },
      "valueAsString": {
        "type": "string",
        "description": "The value of the tags as a string."
      },
      "count": {
        "type": "number",
        "description": "The number of the tags."
      },
      "isAtMax": {
        "type": "boolean",
        "description": "Whether the tags have reached the max limit."
      },
      "setValue": {
        "type": "(value: string[]) => void",
        "description": "Function to set the value of the tags."
      },
      "clearValue": {
        "type": "(id?: string) => void",
        "description": "Function to clear the value of the tags."
      },
      "addValue": {
        "type": "(value: string) => void",
        "description": "Function to add a tag to the tags."
      },
      "setValueAtIndex": {
        "type": "(index: number, value: string) => void",
        "description": "Function to set the value of a tag at the given index."
      },
      "setInputValue": {
        "type": "(value: string) => void",
        "description": "Function to set the value of the tags entry input."
      },
      "clearInputValue": {
        "type": "() => void",
        "description": "Function to clear the value of the tags entry input."
      },
      "focus": {
        "type": "() => void",
        "description": "Function to focus the tags entry input."
      }
    },
    "context": {
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "ids": {
        "type": "Partial<{ root: string; input: string; clearBtn: string; label: string; control: string; tag(opts: TagProps): string; }>",
        "description": "The ids of the elements in the tags input. Useful for composition."
      },
      "translations": {
        "type": "IntlTranslations",
        "description": "Specifies the localized strings that identifies the accessibility elements and their states"
      },
      "maxLength": {
        "type": "number",
        "description": "The max length of the input."
      },
      "delimiter": {
        "type": "string",
        "description": "The character that serves has:\n- event key to trigger the addition of a new tag\n- character used to split tags when pasting into the input",
        "defaultValue": "\",\" (aka COMMA)"
      },
      "autoFocus": {
        "type": "boolean",
        "description": "Whether the input should be auto-focused"
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the tags input should be disabled"
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the tags input should be read-only"
      },
      "invalid": {
        "type": "boolean",
        "description": "Whether the tags input is invalid"
      },
      "allowEditTag": {
        "type": "boolean",
        "description": "Whether a tag can be edited after creation.\nIf `true` and focus is on a tag, pressing `Enter`or double clicking will edit the tag."
      },
      "inputValue": {
        "type": "string",
        "description": "The tag input's value"
      },
      "value": {
        "type": "string[]",
        "description": "The tag values"
      },
      "onChange": {
        "type": "(details: { values: string[]; }) => void",
        "description": "Callback fired when the tag values is updated"
      },
      "onHighlight": {
        "type": "(details: { value: string; }) => void",
        "description": "Callback fired when a tag is focused by pointer or keyboard navigation"
      },
      "onInvalid": {
        "type": "(details: { reason: ValidityState; }) => void",
        "description": "Callback fired when the max tag count is reached or the `validateTag` function returns `false`"
      },
      "onTagUpdate": {
        "type": "(details: { value: string; index: number; }) => void",
        "description": "Callback fired when a tag's value is updated"
      },
      "validate": {
        "type": "(details: { inputValue: string; values: string[]; }) => boolean",
        "description": "Returns a boolean that determines whether a tag can be added.\nUseful for preventing duplicates or invalid tag values."
      },
      "onInteractOutside": {
        "type": "(event: InteractOutsideEvent) => void",
        "description": "Callback fired when an outside interaction was triggered.\nUseful for preventing blur on the tags input when composing it with other components (e.g. combobox)."
      },
      "blurBehavior": {
        "type": "\"clear\" | \"add\"",
        "description": "The behavior of the tags input when the input is blurred\n- `\"add\"`: add the input value as a new tag\n- `\"none\"`: do nothing\n- `\"clear\"`: clear the input value",
        "defaultValue": "\"none\""
      },
      "addOnPaste": {
        "type": "boolean",
        "description": "Whether to add a tag when you paste values into the tag input"
      },
      "max": {
        "type": "number",
        "description": "The max number of tags"
      },
      "allowOverflow": {
        "type": "boolean",
        "description": "Whether to allow tags to exceed max. In this case,\nwe'll attach `data-invalid` to the root"
      },
      "name": {
        "type": "string",
        "description": "The name attribute for the input. Useful for form submissions"
      },
      "form": {
        "type": "string",
        "description": "The associate form of the underlying input element."
      }
    }
  },
  "toast": {
    "api": {
      "type": {
        "type": "Type",
        "description": "The type of the toast."
      },
      "title": {
        "type": "string",
        "description": "The title of the toast."
      },
      "description": {
        "type": "string",
        "description": "The description of the toast."
      },
      "placement": {
        "type": "Placement",
        "description": "The current placement of the toast."
      },
      "isVisible": {
        "type": "boolean",
        "description": "Whether the toast is visible."
      },
      "isPaused": {
        "type": "boolean",
        "description": "Whether the toast is paused."
      },
      "isRtl": {
        "type": "boolean",
        "description": "Whether the toast is in RTL mode."
      },
      "pause": {
        "type": "() => void",
        "description": "Function to pause the toast (keeping it visible)."
      },
      "resume": {
        "type": "() => void",
        "description": "Function to resume the toast dismissing."
      },
      "dismiss": {
        "type": "() => void",
        "description": "Function to instantly dismiss the toast."
      },
      "render": {
        "type": "() => any",
        "description": "Function render the toast in the DOM (based on the defined `render` property)"
      }
    },
    "context": {}
  },
  "toggle": {
    "api": {
      "isPressed": {
        "type": "boolean",
        "description": "Whether the toggle is pressed."
      },
      "setPressed": {
        "type": "(pressed: boolean) => void",
        "description": "Function to set the pressed state of the toggle."
      }
    },
    "context": {
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "ids": {
        "type": "Partial<{ button: string; }>",
        "description": "The ids of the elements in the toggle. Useful for composition."
      },
      "aria-label": {
        "type": "string",
        "description": "Specifies the localized strings that identifies the accessibility elements and their states"
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the toggle is disabled."
      },
      "onChange": {
        "type": "(details: { pressed: boolean; }) => void",
        "description": "Function to call when the toggle is clicked."
      },
      "pressed": {
        "type": "boolean",
        "description": "Whether the toggle is initially pressed."
      }
    }
  },
  "tooltip": {
    "api": {
      "isOpen": {
        "type": "boolean",
        "description": "Whether the tooltip is open."
      },
      "open": {
        "type": "() => void",
        "description": "Function to open the tooltip."
      },
      "close": {
        "type": "() => void",
        "description": "Function to close the tooltip."
      },
      "getAnimationState": {
        "type": "() => { enter: boolean; exit: boolean; }",
        "description": "Returns the animation state of the tooltip."
      },
      "setPositioning": {
        "type": "(options?: Partial<PositioningOptions>) => void",
        "description": "Function to reposition the popover"
      }
    },
    "context": {
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "ids": {
        "type": "Partial<{ trigger: string; content: string; arrow: string; positioner: string; }>",
        "description": "The ids of the elements in the tooltip. Useful for composition."
      },
      "openDelay": {
        "type": "number",
        "description": "The open delay of the tooltip."
      },
      "closeDelay": {
        "type": "number",
        "description": "The close delay of the tooltip."
      },
      "closeOnPointerDown": {
        "type": "boolean",
        "description": "Whether to close the tooltip on pointerdown."
      },
      "closeOnEsc": {
        "type": "boolean",
        "description": "Whether to close the tooltip when the Escape key is pressed."
      },
      "interactive": {
        "type": "boolean",
        "description": "Whether the tooltip's content is interactive.\nIn this mode, the tooltip will remain open when user hovers over the content."
      },
      "onOpen": {
        "type": "VoidFunction",
        "description": "Function called when the tooltip is opened."
      },
      "onClose": {
        "type": "VoidFunction",
        "description": "Function called when the tooltip is closed."
      },
      "aria-label": {
        "type": "string",
        "description": "Custom label for the tooltip."
      },
      "positioning": {
        "type": "PositioningOptions",
        "description": "The user provided options used to position the popover content"
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the tooltip is disabled"
      },
      "open": {
        "type": "boolean",
        "description": "Whether the tooltip is open"
      }
    }
  },
  "transition": {
    "api": {
      "status": {
        "type": "\"enter\" | \"exit\"",
        "description": "The current status of the transition."
      },
      "unmount": {
        "type": "boolean",
        "description": "Whether to unmount the element"
      },
      "toggle": {
        "type": "() => void",
        "description": "Function to toggle the transition."
      },
      "transition": {
        "type": "(config: TransitionConfig) => T[\"style\"]",
        "description": "Returns the transition styles to apply to the element."
      },
      "transitionGroup": {
        "type": "<K extends string>(configs: Record<K, TransitionConfig>) => Record<K, Record<string, any>>",
        "description": "Returns the transition styles to apply to a group of elements."
      }
    },
    "context": {
      "mounted": {
        "type": "boolean",
        "description": "Whether the transition is mounted."
      },
      "duration": {
        "type": "number | { enter: number; exit: number; }",
        "description": "The duration of the transition."
      },
      "reduceMotion": {
        "type": "boolean",
        "description": "Whether to listen to reduce motion preferences"
      },
      "onEnter": {
        "type": "VoidFunction",
        "description": "Function called when the transition enters."
      },
      "onExit": {
        "type": "VoidFunction",
        "description": "Function called when the transition exits."
      },
      "onEntered": {
        "type": "VoidFunction",
        "description": "Function called when the transition has entered."
      },
      "onExited": {
        "type": "VoidFunction",
        "description": "Function called when the transition has exited."
      }
    }
  }
}
