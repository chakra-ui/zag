{
  "accordion": {
    "api": {
      "focusedValue": {
        "type": "string",
        "description": "The value of the focused accordion item."
      },
      "value": {
        "type": "string[]",
        "description": "The value of the accordion"
      },
      "setValue": {
        "type": "(value: string[]) => void",
        "description": "Sets the value of the accordion."
      },
      "getItemState": {
        "type": "(props: ItemProps) => ItemState",
        "description": "Gets the state of an accordion item."
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ root: string; item(value: string): string; itemContent(value: string): string; itemTrigger(value: string): string; }>",
        "description": "The ids of the elements in the accordion. Useful for composition."
      },
      "multiple": {
        "type": "boolean",
        "description": "Whether multiple accordion items can be expanded at the same time.",
        "defaultValue": "false"
      },
      "collapsible": {
        "type": "boolean",
        "description": "Whether an accordion item can be closed after it has been expanded.",
        "defaultValue": "false"
      },
      "value": {
        "type": "string[]",
        "description": "The controlled value of the expanded accordion items."
      },
      "defaultValue": {
        "type": "string[]",
        "description": "The initial value of the expanded accordion items.\nUse when you don't need to control the value of the accordion."
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the accordion items are disabled"
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails) => void",
        "description": "The callback fired when the state of expanded/collapsed accordion items changes."
      },
      "onFocusChange": {
        "type": "(details: FocusChangeDetails) => void",
        "description": "The callback fired when the focused accordion item changes."
      },
      "orientation": {
        "type": "\"horizontal\" | \"vertical\"",
        "description": "The orientation of the accordion items.",
        "defaultValue": "\"vertical\""
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  },
  "angle-slider": {
    "api": {
      "value": {
        "type": "number",
        "description": "The current value of the angle slider"
      },
      "valueAsDegree": {
        "type": "string",
        "description": "The current value as a degree string"
      },
      "setValue": {
        "type": "(value: number) => void",
        "description": "Sets the value of the angle slider"
      },
      "dragging": {
        "type": "boolean",
        "description": "Whether the slider is being dragged."
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ root: string; thumb: string; hiddenInput: string; control: string; valueText: string; }>",
        "description": "The ids of the elements in the machine.\nUseful for composition."
      },
      "step": {
        "type": "number",
        "description": "The step value for the slider.",
        "defaultValue": "1"
      },
      "value": {
        "type": "number",
        "description": "The value of the slider."
      },
      "defaultValue": {
        "type": "number",
        "description": "The initial value of the slider.\nUse when you don't need to control the value of the slider.",
        "defaultValue": "0"
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails) => void",
        "description": "The callback function for when the value changes."
      },
      "onValueChangeEnd": {
        "type": "(details: ValueChangeDetails) => void",
        "description": "The callback function for when the value changes ends."
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the slider is disabled."
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the slider is read-only."
      },
      "invalid": {
        "type": "boolean",
        "description": "Whether the slider is invalid."
      },
      "name": {
        "type": "string",
        "description": "The name of the slider. Useful for form submission."
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  },
  "avatar": {
    "api": {
      "loaded": {
        "type": "boolean",
        "description": "Whether the image is loaded."
      },
      "setSrc": {
        "type": "(src: string) => void",
        "description": "Function to set new src."
      },
      "setLoaded": {
        "type": "() => void",
        "description": "Function to set loaded state."
      },
      "setError": {
        "type": "() => void",
        "description": "Function to set error state."
      }
    },
    "context": {
      "onStatusChange": {
        "type": "(details: StatusChangeDetails) => void",
        "description": "Functional called when the image loading status changes."
      },
      "ids": {
        "type": "Partial<{ root: string; image: string; fallback: string; }>",
        "description": "The ids of the elements in the avatar. Useful for composition."
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      }
    }
  },
  "carousel": {
    "api": {
      "page": {
        "type": "number",
        "description": "The current index of the carousel"
      },
      "pageSnapPoints": {
        "type": "number[]",
        "description": "The current snap points of the carousel"
      },
      "isPlaying": {
        "type": "boolean",
        "description": "Whether the carousel is auto playing"
      },
      "isDragging": {
        "type": "boolean",
        "description": "Whether the carousel is being dragged. This only works when `draggable` is true."
      },
      "canScrollNext": {
        "type": "boolean",
        "description": "Whether the carousel is can scroll to the next view"
      },
      "canScrollPrev": {
        "type": "boolean",
        "description": "Whether the carousel is can scroll to the previous view"
      },
      "scrollToIndex": {
        "type": "(index: number, instant?: boolean) => void",
        "description": "Function to scroll to a specific item index"
      },
      "scrollTo": {
        "type": "(page: number, instant?: boolean) => void",
        "description": "Function to scroll to a specific page"
      },
      "scrollNext": {
        "type": "(instant?: boolean) => void",
        "description": "Function to scroll to the next page"
      },
      "scrollPrev": {
        "type": "(instant?: boolean) => void",
        "description": "Function to scroll to the previous page"
      },
      "getProgress": {
        "type": "() => number",
        "description": "Returns the current scroll progress as a percentage"
      },
      "play": {
        "type": "() => void",
        "description": "Function to start/resume autoplay"
      },
      "pause": {
        "type": "() => void",
        "description": "Function to pause autoplay"
      },
      "isInView": {
        "type": "(index: number) => boolean",
        "description": "Whether the item is in view"
      },
      "refresh": {
        "type": "() => void",
        "description": "Function to re-compute the snap points\nand clamp the page"
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ root: string; item(index: number): string; itemGroup: string; nextTrigger: string; prevTrigger: string; indicatorGroup: string; indicator(index: number): string; }>",
        "description": "The ids of the elements in the carousel. Useful for composition."
      },
      "translations": {
        "type": "IntlTranslations",
        "description": "The localized messages to use."
      },
      "slidesPerPage": {
        "type": "number",
        "description": "The number of slides to show at a time.",
        "defaultValue": "1"
      },
      "slidesPerMove": {
        "type": "number | \"auto\"",
        "description": "The number of slides to scroll at a time.\n\nWhen set to `auto`, the number of slides to scroll is determined by the\n`slidesPerPage` property.",
        "defaultValue": "\"auto\""
      },
      "autoplay": {
        "type": "boolean | { delay: number; }",
        "description": "Whether to scroll automatically. The default delay is 4000ms.",
        "defaultValue": "false"
      },
      "allowMouseDrag": {
        "type": "boolean",
        "description": "Whether to allow scrolling via dragging with mouse",
        "defaultValue": "false"
      },
      "loop": {
        "type": "boolean",
        "description": "Whether the carousel should loop around.",
        "defaultValue": "false"
      },
      "page": {
        "type": "number",
        "description": "The controlled page of the carousel."
      },
      "defaultPage": {
        "type": "number",
        "description": "The initial page to scroll to when rendered.\nUse when you don't need to control the page of the carousel.",
        "defaultValue": "0"
      },
      "spacing": {
        "type": "string",
        "description": "The amount of space between items.",
        "defaultValue": "\"0px\""
      },
      "padding": {
        "type": "string",
        "description": "Defines the extra space added around the scrollable area,\nenabling nearby items to remain partially in view."
      },
      "onPageChange": {
        "type": "(details: PageChangeDetails) => void",
        "description": "Function called when the page changes."
      },
      "inViewThreshold": {
        "type": "number | number[]",
        "description": "The threshold for determining if an item is in view.",
        "defaultValue": "0.6"
      },
      "snapType": {
        "type": "\"proximity\" | \"mandatory\"",
        "description": "The snap type of the item.",
        "defaultValue": "\"mandatory\""
      },
      "slideCount": {
        "type": "number",
        "description": "The total number of slides.\nUseful for SSR to render the initial ating the snap points."
      },
      "onDragStatusChange": {
        "type": "(details: DragStatusDetails) => void",
        "description": "Function called when the drag status changes."
      },
      "onAutoplayStatusChange": {
        "type": "(details: AutoplayStatusDetails) => void",
        "description": "Function called when the autoplay status changes."
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "orientation": {
        "type": "\"horizontal\" | \"vertical\"",
        "description": "The orientation of the element.",
        "defaultValue": "\"horizontal\""
      }
    }
  },
  "checkbox": {
    "api": {
      "checked": {
        "type": "boolean",
        "description": "Whether the checkbox is checked"
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the checkbox is disabled"
      },
      "indeterminate": {
        "type": "boolean",
        "description": "Whether the checkbox is indeterminate"
      },
      "focused": {
        "type": "boolean",
        "description": "Whether the checkbox is focused"
      },
      "checkedState": {
        "type": "CheckedState",
        "description": "The checked state of the checkbox"
      },
      "setChecked": {
        "type": "(checked: CheckedState) => void",
        "description": "Function to set the checked state of the checkbox"
      },
      "toggleChecked": {
        "type": "() => void",
        "description": "Function to toggle the checked state of the checkbox"
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ root: string; hiddenInput: string; control: string; label: string; }>",
        "description": "The ids of the elements in the checkbox. Useful for composition."
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the checkbox is disabled"
      },
      "invalid": {
        "type": "boolean",
        "description": "Whether the checkbox is invalid"
      },
      "required": {
        "type": "boolean",
        "description": "Whether the checkbox is required"
      },
      "checked": {
        "type": "CheckedState",
        "description": "The controlled checked state of the checkbox"
      },
      "defaultChecked": {
        "type": "CheckedState",
        "description": "The initial checked state of the checkbox when rendered.\nUse when you don't need to control the checked state of the checkbox."
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the checkbox is read-only"
      },
      "onCheckedChange": {
        "type": "(details: CheckedChangeDetails) => void",
        "description": "The callback invoked when the checked state changes."
      },
      "name": {
        "type": "string",
        "description": "The name of the input field in a checkbox.\nUseful for form submission."
      },
      "form": {
        "type": "string",
        "description": "The id of the form that the checkbox belongs to."
      },
      "value": {
        "type": "string",
        "description": "The value of checkbox input. Useful for form submission.",
        "defaultValue": "\"on\""
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  },
  "clipboard": {
    "api": {
      "copied": {
        "type": "boolean",
        "description": "Whether the value has been copied to the clipboard"
      },
      "value": {
        "type": "string",
        "description": "The value to be copied to the clipboard"
      },
      "setValue": {
        "type": "(value: string) => void",
        "description": "Set the value to be copied to the clipboard"
      },
      "copy": {
        "type": "() => void",
        "description": "Copy the value to the clipboard"
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ root: string; input: string; label: string; }>",
        "description": "The ids of the elements in the clipboard. Useful for composition."
      },
      "value": {
        "type": "string",
        "description": "The controlled value of the clipboard"
      },
      "defaultValue": {
        "type": "string",
        "description": "The initial value to be copied to the clipboard when rendered.\nUse when you don't need to control the value of the clipboard."
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails) => void",
        "description": "The function to be called when the value changes"
      },
      "onStatusChange": {
        "type": "(details: CopyStatusDetails) => void",
        "description": "The function to be called when the value is copied to the clipboard"
      },
      "timeout": {
        "type": "number",
        "description": "The timeout for the copy operation",
        "defaultValue": "3000"
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  },
  "collapsible": {
    "api": {
      "open": {
        "type": "boolean",
        "description": "Whether the collapsible is open."
      },
      "visible": {
        "type": "boolean",
        "description": "Whether the collapsible is visible (open or closing)"
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the collapsible is disabled"
      },
      "setOpen": {
        "type": "(open: boolean) => void",
        "description": "Function to open or close the collapsible."
      },
      "measureSize": {
        "type": "() => void",
        "description": "Function to measure the size of the content."
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ root: string; content: string; trigger: string; }>",
        "description": "The ids of the elements in the collapsible. Useful for composition."
      },
      "open": {
        "type": "boolean",
        "description": "The controlled open state of the collapsible."
      },
      "defaultOpen": {
        "type": "boolean",
        "description": "The initial open state of the collapsible when rendered.\nUse when you don't need to control the open state of the collapsible."
      },
      "onOpenChange": {
        "type": "(details: OpenChangeDetails) => void",
        "description": "The callback invoked when the open state changes."
      },
      "onExitComplete": {
        "type": "VoidFunction",
        "description": "The callback invoked when the exit animation completes."
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the collapsible is disabled."
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      }
    }
  },
  "color-picker": {
    "api": {
      "dragging": {
        "type": "boolean",
        "description": "Whether the color picker is being dragged"
      },
      "open": {
        "type": "boolean",
        "description": "Whether the color picker is open"
      },
      "value": {
        "type": "Color",
        "description": "The current color value (as a string)"
      },
      "valueAsString": {
        "type": "string",
        "description": "The current color value (as a Color object)"
      },
      "setValue": {
        "type": "(value: string | Color) => void",
        "description": "Function to set the color value"
      },
      "getChannelValue": {
        "type": "(channel: ColorChannel) => string",
        "description": "Function to set the color value"
      },
      "getChannelValueText": {
        "type": "(channel: ColorChannel, locale: string) => string",
        "description": "Function to get the formatted and localized value of a specific channel"
      },
      "setChannelValue": {
        "type": "(channel: ColorChannel, value: number) => void",
        "description": "Function to set the color value of a specific channel"
      },
      "format": {
        "type": "ColorFormat",
        "description": "The current color format"
      },
      "setFormat": {
        "type": "(format: ColorFormat) => void",
        "description": "Function to set the color format"
      },
      "alpha": {
        "type": "number",
        "description": "The alpha value of the color"
      },
      "setAlpha": {
        "type": "(value: number) => void",
        "description": "Function to set the color alpha"
      },
      "setOpen": {
        "type": "(open: boolean) => void",
        "description": "Function to open or close the color picker"
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ root: string; control: string; trigger: string; label: string; input: string; hiddenInput: string; content: string; area: string; areaGradient: string; positioner: string; formatSelect: string; areaThumb: string; channelInput(id: string): string; channelSliderTrack(id: ColorChannel): string; }>",
        "description": "The ids of the elements in the color picker. Useful for composition."
      },
      "value": {
        "type": "Color",
        "description": "The controlled color value of the color picker"
      },
      "defaultValue": {
        "type": "Color",
        "description": "The initial color value when rendered.\nUse when you don't need to control the color value of the color picker.",
        "defaultValue": "#000000"
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the color picker is disabled"
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the color picker is read-only"
      },
      "required": {
        "type": "boolean",
        "description": "Whether the color picker is required"
      },
      "invalid": {
        "type": "boolean",
        "description": "Whether the color picker is invalid"
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails) => void",
        "description": "Handler that is called when the value changes, as the user drags."
      },
      "onValueChangeEnd": {
        "type": "(details: ValueChangeDetails) => void",
        "description": "Handler that is called when the user stops dragging."
      },
      "onOpenChange": {
        "type": "(details: OpenChangeDetails) => void",
        "description": "Handler that is called when the user opens or closes the color picker."
      },
      "name": {
        "type": "string",
        "description": "The name for the form input"
      },
      "positioning": {
        "type": "PositioningOptions",
        "description": "The positioning options for the color picker"
      },
      "initialFocusEl": {
        "type": "() => HTMLElement",
        "description": "The initial focus element when the color picker is opened."
      },
      "open": {
        "type": "boolean",
        "description": "The controlled open state of the color picker"
      },
      "defaultOpen": {
        "type": "boolean",
        "description": "The initial open state of the color picker when rendered.\nUse when you don't need to control the open state of the color picker."
      },
      "format": {
        "type": "ColorFormat",
        "description": "The controlled color format to use"
      },
      "defaultFormat": {
        "type": "ColorFormat",
        "description": "The initial color format when rendered.\nUse when you don't need to control the color format of the color picker.",
        "defaultValue": "\"rgba\""
      },
      "onFormatChange": {
        "type": "(details: FormatChangeDetails) => void",
        "description": "Function called when the color format changes"
      },
      "closeOnSelect": {
        "type": "boolean",
        "description": "Whether to close the color picker when a swatch is selected",
        "defaultValue": "false"
      },
      "openAutoFocus": {
        "type": "boolean",
        "description": "Whether to auto focus the color picker when it is opened",
        "defaultValue": "true"
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => Node | ShadowRoot | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "onPointerDownOutside": {
        "type": "(event: PointerDownOutsideEvent) => void",
        "description": "Function called when the pointer is pressed down outside the component"
      },
      "onFocusOutside": {
        "type": "(event: FocusOutsideEvent) => void",
        "description": "Function called when the focus is moved outside the component"
      },
      "onInteractOutside": {
        "type": "(event: InteractOutsideEvent) => void",
        "description": "Function called when an interaction happens outside the component"
      }
    }
  },
  "combobox": {
    "api": {
      "focused": {
        "type": "boolean",
        "description": "Whether the combobox is focused"
      },
      "open": {
        "type": "boolean",
        "description": "Whether the combobox is open"
      },
      "inputValue": {
        "type": "string",
        "description": "The value of the combobox input"
      },
      "highlightedValue": {
        "type": "string",
        "description": "The value of the highlighted item"
      },
      "highlightedItem": {
        "type": "V",
        "description": "The highlighted item"
      },
      "setHighlightValue": {
        "type": "(value: string) => void",
        "description": "The value of the combobox input"
      },
      "syncSelectedItems": {
        "type": "() => void",
        "description": "Function to sync the selected items with the value.\nUseful when `value` is updated from async sources."
      },
      "selectedItems": {
        "type": "V[]",
        "description": "The selected items"
      },
      "hasSelectedItems": {
        "type": "boolean",
        "description": "Whether there's a selected item"
      },
      "value": {
        "type": "string[]",
        "description": "The selected item keys"
      },
      "valueAsString": {
        "type": "string",
        "description": "The string representation of the selected items"
      },
      "selectValue": {
        "type": "(value: string) => void",
        "description": "Function to select a value"
      },
      "setValue": {
        "type": "(value: string[]) => void",
        "description": "Function to set the value of the combobox"
      },
      "clearValue": {
        "type": "(value?: string) => void",
        "description": "Function to clear the value of the combobox"
      },
      "focus": {
        "type": "() => void",
        "description": "Function to focus on the combobox input"
      },
      "setInputValue": {
        "type": "(value: string) => void",
        "description": "Function to set the input value of the combobox"
      },
      "getItemState": {
        "type": "(props: ItemProps) => ItemState",
        "description": "Returns the state of a combobox item"
      },
      "setOpen": {
        "type": "(open: boolean) => void",
        "description": "Function to open or close the combobox"
      },
      "collection": {
        "type": "ListCollection<V>",
        "description": "Function to toggle the combobox"
      },
      "reposition": {
        "type": "(options?: Partial<PositioningOptions>) => void",
        "description": "Function to set the positioning options"
      },
      "multiple": {
        "type": "boolean",
        "description": "Whether the combobox allows multiple selections"
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the combobox is disabled"
      }
    },
    "context": {
      "open": {
        "type": "boolean",
        "description": "The controlled open state of the combobox"
      },
      "defaultOpen": {
        "type": "boolean",
        "description": "The initial open state of the combobox when rendered.\nUse when you don't need to control the open state of the combobox."
      },
      "ids": {
        "type": "Partial<{ root: string; label: string; control: string; input: string; content: string; trigger: string; clearTrigger: string; item(id: string, index?: number): string; positioner: string; itemGroup(id: string | number): string; itemGroupLabel(id: string | number): string; }>",
        "description": "The ids of the elements in the combobox. Useful for composition."
      },
      "inputValue": {
        "type": "string",
        "description": "The controlled value of the combobox's input"
      },
      "defaultInputValue": {
        "type": "string",
        "description": "The initial value of the combobox's input when rendered.\nUse when you don't need to control the value of the combobox's input.",
        "defaultValue": "\"\""
      },
      "name": {
        "type": "string",
        "description": "The `name` attribute of the combobox's input. Useful for form submission"
      },
      "form": {
        "type": "string",
        "description": "The associate form of the combobox."
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the combobox is disabled"
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the combobox is readonly. This puts the combobox in a \"non-editable\" mode\nbut the user can still interact with it"
      },
      "invalid": {
        "type": "boolean",
        "description": "Whether the combobox is invalid"
      },
      "required": {
        "type": "boolean",
        "description": "Whether the combobox is required"
      },
      "placeholder": {
        "type": "string",
        "description": "The placeholder text of the combobox's input"
      },
      "defaultHighlightedValue": {
        "type": "string",
        "description": "The initial highlighted value of the combobox when rendered.\nUse when you don't need to control the highlighted value of the combobox."
      },
      "highlightedValue": {
        "type": "string",
        "description": "The controlled highlighted value of the combobox"
      },
      "value": {
        "type": "string[]",
        "description": "The controlled value of the combobox's selected items"
      },
      "defaultValue": {
        "type": "string[]",
        "description": "The initial value of the combobox's selected items when rendered.\nUse when you don't need to control the value of the combobox's selected items.",
        "defaultValue": "[]"
      },
      "inputBehavior": {
        "type": "\"autohighlight\" | \"autocomplete\" | \"none\"",
        "description": "Defines the auto-completion behavior of the combobox.\n\n- `autohighlight`: The first focused item is highlighted as the user types\n- `autocomplete`: Navigating the listbox with the arrow keys selects the item and the input is updated",
        "defaultValue": "\"none\""
      },
      "selectionBehavior": {
        "type": "\"clear\" | \"replace\" | \"preserve\"",
        "description": "The behavior of the combobox input when an item is selected\n\n- `replace`: The selected item string is set as the input value\n- `clear`: The input value is cleared\n- `preserve`: The input value is preserved",
        "defaultValue": "\"replace\""
      },
      "autoFocus": {
        "type": "boolean",
        "description": "Whether to autofocus the input on mount"
      },
      "openOnClick": {
        "type": "boolean",
        "description": "Whether to open the combobox popup on initial click on the input",
        "defaultValue": "false"
      },
      "openOnChange": {
        "type": "boolean | ((details: InputValueChangeDetails) => boolean)",
        "description": "Whether to show the combobox when the input value changes",
        "defaultValue": "true"
      },
      "allowCustomValue": {
        "type": "boolean",
        "description": "Whether to allow typing custom values in the input"
      },
      "loopFocus": {
        "type": "boolean",
        "description": "Whether to loop the keyboard navigation through the items",
        "defaultValue": "true"
      },
      "positioning": {
        "type": "PositioningOptions",
        "description": "The positioning options to dynamically position the menu",
        "defaultValue": "{ placement: \"bottom-start\" }"
      },
      "onInputValueChange": {
        "type": "(details: InputValueChangeDetails) => void",
        "description": "Function called when the input's value changes"
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails<T>) => void",
        "description": "Function called when a new item is selected"
      },
      "onHighlightChange": {
        "type": "(details: HighlightChangeDetails<T>) => void",
        "description": "Function called when an item is highlighted using the pointer\nor keyboard navigation."
      },
      "onSelect": {
        "type": "(details: SelectionDetails) => void",
        "description": "Function called when an item is selected"
      },
      "onOpenChange": {
        "type": "(details: OpenChangeDetails) => void",
        "description": "Function called when the popup is opened"
      },
      "translations": {
        "type": "IntlTranslations",
        "description": "Specifies the localized strings that identifies the accessibility elements and their states"
      },
      "collection": {
        "type": "ListCollection<T>",
        "description": "The collection of items"
      },
      "multiple": {
        "type": "boolean",
        "description": "Whether to allow multiple selection.\n\n**Good to know:** When `multiple` is `true`, the `selectionBehavior` is automatically set to `clear`.\nIt is recommended to render the selected items in a separate container."
      },
      "closeOnSelect": {
        "type": "boolean",
        "description": "Whether to close the combobox when an item is selected."
      },
      "openOnKeyPress": {
        "type": "boolean",
        "description": "Whether to open the combobox on arrow key press",
        "defaultValue": "true"
      },
      "scrollToIndexFn": {
        "type": "(details: ScrollToIndexDetails) => void",
        "description": "Function to scroll to a specific index"
      },
      "composite": {
        "type": "boolean",
        "description": "Whether the combobox is a composed with other composite widgets like tabs",
        "defaultValue": "true"
      },
      "disableLayer": {
        "type": "boolean",
        "description": "Whether to disable registering this a dismissable layer"
      },
      "navigate": {
        "type": "(details: NavigateDetails) => void",
        "description": "Function to navigate to the selected item"
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "onPointerDownOutside": {
        "type": "(event: PointerDownOutsideEvent) => void",
        "description": "Function called when the pointer is pressed down outside the component"
      },
      "onFocusOutside": {
        "type": "(event: FocusOutsideEvent) => void",
        "description": "Function called when the focus is moved outside the component"
      },
      "onInteractOutside": {
        "type": "(event: InteractOutsideEvent) => void",
        "description": "Function called when an interaction happens outside the component"
      }
    }
  },
  "date-picker": {
    "api": {
      "focused": {
        "type": "boolean",
        "description": "Whether the input is focused"
      },
      "open": {
        "type": "boolean",
        "description": "Whether the date picker is open"
      },
      "view": {
        "type": "DateView",
        "description": "The current view of the date picker"
      },
      "getDaysInWeek": {
        "type": "(week: number, from?: DateValue) => DateValue[]",
        "description": "Returns an array of days in the week index counted from the provided start date, or the first visible date if not given."
      },
      "getOffset": {
        "type": "(duration: DateDuration) => DateValueOffset",
        "description": "Returns the offset of the month based on the provided number of months."
      },
      "getRangePresetValue": {
        "type": "(value: DateRangePreset) => DateValue[]",
        "description": "Returns the range of dates based on the provided date range preset."
      },
      "getMonthWeeks": {
        "type": "(from?: DateValue) => DateValue[][]",
        "description": "Returns the weeks of the month from the provided date. Represented as an array of arrays of dates."
      },
      "isUnavailable": {
        "type": "(date: DateValue) => boolean",
        "description": "Returns whether the provided date is available (or can be selected)"
      },
      "weeks": {
        "type": "DateValue[][]",
        "description": "The weeks of the month. Represented as an array of arrays of dates."
      },
      "weekDays": {
        "type": "WeekDay[]",
        "description": "The days of the week. Represented as an array of strings."
      },
      "visibleRange": {
        "type": "VisibleRange",
        "description": "The visible range of dates."
      },
      "visibleRangeText": {
        "type": "VisibleRangeText",
        "description": "The human readable text for the visible range of dates."
      },
      "value": {
        "type": "DateValue[]",
        "description": "The selected date."
      },
      "valueAsDate": {
        "type": "Date[]",
        "description": "The selected date as a Date object."
      },
      "valueAsString": {
        "type": "string[]",
        "description": "The selected date as a string."
      },
      "focusedValue": {
        "type": "DateValue",
        "description": "The focused date."
      },
      "focusedValueAsDate": {
        "type": "Date",
        "description": "The focused date as a Date object."
      },
      "focusedValueAsString": {
        "type": "string",
        "description": "The focused date as a string."
      },
      "selectToday": {
        "type": "() => void",
        "description": "Sets the selected date to today."
      },
      "setValue": {
        "type": "(values: CalendarDate[]) => void",
        "description": "Sets the selected date to the given date."
      },
      "setFocusedValue": {
        "type": "(value: CalendarDate) => void",
        "description": "Sets the focused date to the given date."
      },
      "clearValue": {
        "type": "() => void",
        "description": "Clears the selected date(s)."
      },
      "setOpen": {
        "type": "(open: boolean) => void",
        "description": "Function to open or close the calendar."
      },
      "focusMonth": {
        "type": "(month: number) => void",
        "description": "Function to set the selected month."
      },
      "focusYear": {
        "type": "(year: number) => void",
        "description": "Function to set the selected year."
      },
      "getYears": {
        "type": "() => Cell[]",
        "description": "Returns the months of the year"
      },
      "getYearsGrid": {
        "type": "(props?: YearGridProps) => YearGridValue",
        "description": "Returns the years of the decade based on the columns.\nRepresented as an array of arrays of years."
      },
      "getDecade": {
        "type": "() => Range<number>",
        "description": "Returns the start and end years of the decade."
      },
      "getMonths": {
        "type": "(props?: MonthFormatOptions) => Cell[]",
        "description": "Returns the months of the year"
      },
      "getMonthsGrid": {
        "type": "(props?: MonthGridProps) => MonthGridValue",
        "description": "Returns the months of the year based on the columns.\nRepresented as an array of arrays of months."
      },
      "format": {
        "type": "(value: CalendarDate, opts?: Intl.DateTimeFormatOptions) => string",
        "description": "Formats the given date value based on the provided options."
      },
      "setView": {
        "type": "(view: DateView) => void",
        "description": "Sets the view of the date picker."
      },
      "goToNext": {
        "type": "() => void",
        "description": "Goes to the next month/year/decade."
      },
      "goToPrev": {
        "type": "() => void",
        "description": "Goes to the previous month/year/decade."
      },
      "getDayTableCellState": {
        "type": "(props: DayTableCellProps) => DayTableCellState",
        "description": "Returns the state details for a given cell."
      },
      "getMonthTableCellState": {
        "type": "(props: TableCellProps) => TableCellState",
        "description": "Returns the state details for a given month cell."
      },
      "getYearTableCellState": {
        "type": "(props: TableCellProps) => TableCellState",
        "description": "Returns the state details for a given year cell."
      }
    },
    "context": {
      "locale": {
        "type": "string",
        "description": "The locale (BCP 47 language tag) to use when formatting the date.",
        "defaultValue": "\"en-US\""
      },
      "translations": {
        "type": "IntlTranslations",
        "description": "The localized messages to use."
      },
      "ids": {
        "type": "Partial<{ root: string; label(index: number): string; table(id: string): string; tableHeader(id: string): string; tableBody(id: string): string; tableRow(id: string): string; content: string; cellTrigger(id: string): string; prevTrigger(view: DateView): string; clearTrigger: string; control: string; input(index: number): string; trigger: string; monthSelect: string; yearSelect: string; positioner: string; }>",
        "description": "The ids of the elements in the date picker. Useful for composition."
      },
      "name": {
        "type": "string",
        "description": "The `name` attribute of the input element."
      },
      "timeZone": {
        "type": "string",
        "description": "The time zone to use",
        "defaultValue": "\"UTC\""
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the calendar is disabled."
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the calendar is read-only."
      },
      "min": {
        "type": "DateValue",
        "description": "The minimum date that can be selected."
      },
      "max": {
        "type": "DateValue",
        "description": "The maximum date that can be selected."
      },
      "closeOnSelect": {
        "type": "boolean",
        "description": "Whether the calendar should close after the date selection is complete.\nThis is ignored when the selection mode is `multiple`.",
        "defaultValue": "true"
      },
      "value": {
        "type": "DateValue[]",
        "description": "The controlled selected date(s)."
      },
      "defaultValue": {
        "type": "DateValue[]",
        "description": "The initial selected date(s) when rendered.\nUse when you don't need to control the selected date(s) of the date picker."
      },
      "focusedValue": {
        "type": "DateValue",
        "description": "The controlled focused date."
      },
      "defaultFocusedValue": {
        "type": "DateValue",
        "description": "The initial focused date when rendered.\nUse when you don't need to control the focused date of the date picker."
      },
      "numOfMonths": {
        "type": "number",
        "description": "The number of months to display."
      },
      "startOfWeek": {
        "type": "number",
        "description": "The first day of the week.\n `0` - Sunday\n `1` - Monday\n `2` - Tuesday\n `3` - Wednesday\n `4` - Thursday\n `5` - Friday\n `6` - Saturday"
      },
      "fixedWeeks": {
        "type": "boolean",
        "description": "Whether the calendar should have a fixed number of weeks.\nThis renders the calendar with 6 weeks instead of 5 or 6."
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails) => void",
        "description": "Function called when the value changes."
      },
      "onFocusChange": {
        "type": "(details: FocusChangeDetails) => void",
        "description": "Function called when the focused date changes."
      },
      "onViewChange": {
        "type": "(details: ViewChangeDetails) => void",
        "description": "Function called when the view changes."
      },
      "onOpenChange": {
        "type": "(details: OpenChangeDetails) => void",
        "description": "Function called when the calendar opens or closes."
      },
      "isDateUnavailable": {
        "type": "(date: DateValue, locale: string) => boolean",
        "description": "Returns whether a date of the calendar is available."
      },
      "selectionMode": {
        "type": "SelectionMode",
        "description": "The selection mode of the calendar.\n- `single` - only one date can be selected\n- `multiple` - multiple dates can be selected\n- `range` - a range of dates can be selected",
        "defaultValue": "\"single\""
      },
      "format": {
        "type": "(date: LocaleDetails) => string",
        "description": "The format of the date to display in the input."
      },
      "parse": {
        "type": "(value: string, details: LocaleDetails) => DateValue",
        "description": "Function to parse the date from the input back to a DateValue."
      },
      "placeholder": {
        "type": "string",
        "description": "The placeholder text to display in the input."
      },
      "view": {
        "type": "DateView",
        "description": "The view of the calendar"
      },
      "defaultView": {
        "type": "DateView",
        "description": "The default view of the calendar",
        "defaultValue": "\"day\""
      },
      "minView": {
        "type": "DateView",
        "description": "The minimum view of the calendar",
        "defaultValue": "\"day\""
      },
      "maxView": {
        "type": "DateView",
        "description": "The maximum view of the calendar",
        "defaultValue": "\"year\""
      },
      "positioning": {
        "type": "PositioningOptions",
        "description": "The user provided options used to position the date picker content"
      },
      "open": {
        "type": "boolean",
        "description": "The controlled open state of the date picker"
      },
      "defaultOpen": {
        "type": "boolean",
        "description": "The initial open state of the date picker when rendered.\nUse when you don't need to control the open state of the date picker."
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  },
  "dialog": {
    "api": {
      "open": {
        "type": "boolean",
        "description": "Whether the dialog is open"
      },
      "setOpen": {
        "type": "(open: boolean) => void",
        "description": "Function to open or close the dialog"
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ trigger: string; positioner: string; backdrop: string; content: string; closeTrigger: string; title: string; description: string; }>",
        "description": "The ids of the elements in the dialog. Useful for composition."
      },
      "trapFocus": {
        "type": "boolean",
        "description": "Whether to trap focus inside the dialog when it's opened",
        "defaultValue": "true"
      },
      "preventScroll": {
        "type": "boolean",
        "description": "Whether to prevent scrolling behind the dialog when it's opened",
        "defaultValue": "true"
      },
      "modal": {
        "type": "boolean",
        "description": "Whether to prevent pointer interaction outside the element and hide all content below it",
        "defaultValue": "true"
      },
      "initialFocusEl": {
        "type": "() => HTMLElement",
        "description": "Element to receive focus when the dialog is opened"
      },
      "finalFocusEl": {
        "type": "() => HTMLElement",
        "description": "Element to receive focus when the dialog is closed"
      },
      "restoreFocus": {
        "type": "boolean",
        "description": "Whether to restore focus to the element that had focus before the dialog was opened"
      },
      "closeOnInteractOutside": {
        "type": "boolean",
        "description": "Whether to close the dialog when the outside is clicked",
        "defaultValue": "true"
      },
      "closeOnEscape": {
        "type": "boolean",
        "description": "Whether to close the dialog when the escape key is pressed",
        "defaultValue": "true"
      },
      "aria-label": {
        "type": "string",
        "description": "Human readable label for the dialog, in event the dialog title is not rendered"
      },
      "role": {
        "type": "\"dialog\" | \"alertdialog\"",
        "description": "The dialog's role",
        "defaultValue": "\"dialog\""
      },
      "open": {
        "type": "boolean",
        "description": "The controlled open state of the dialog"
      },
      "defaultOpen": {
        "type": "boolean",
        "description": "The initial open state of the dialog when rendered.\nUse when you don't need to control the open state of the dialog.",
        "defaultValue": "false"
      },
      "onOpenChange": {
        "type": "(details: OpenChangeDetails) => void",
        "description": "Function to call when the dialog's open state changes"
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => Node | ShadowRoot | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "onEscapeKeyDown": {
        "type": "(event: KeyboardEvent) => void",
        "description": "Function called when the escape key is pressed"
      },
      "onPointerDownOutside": {
        "type": "(event: PointerDownOutsideEvent) => void",
        "description": "Function called when the pointer is pressed down outside the component"
      },
      "onFocusOutside": {
        "type": "(event: FocusOutsideEvent) => void",
        "description": "Function called when the focus is moved outside the component"
      },
      "onInteractOutside": {
        "type": "(event: InteractOutsideEvent) => void",
        "description": "Function called when an interaction happens outside the component"
      },
      "persistentElements": {
        "type": "(() => Element)[]",
        "description": "Returns the persistent elements that:\n- should not have pointer-events disabled\n- should not trigger the dismiss event"
      }
    }
  },
  "editable": {
    "api": {
      "editing": {
        "type": "boolean",
        "description": "Whether the editable is in edit mode"
      },
      "empty": {
        "type": "boolean",
        "description": "Whether the editable value is empty"
      },
      "value": {
        "type": "string",
        "description": "The current value of the editable"
      },
      "valueText": {
        "type": "string",
        "description": "The current value of the editable, or the placeholder if the value is empty"
      },
      "setValue": {
        "type": "(value: string) => void",
        "description": "Function to set the value of the editable"
      },
      "clearValue": {
        "type": "() => void",
        "description": "Function to clear the value of the editable"
      },
      "edit": {
        "type": "() => void",
        "description": "Function to enter edit mode"
      },
      "cancel": {
        "type": "() => void",
        "description": "Function to exit edit mode, and discard any changes"
      },
      "submit": {
        "type": "() => void",
        "description": "Function to exit edit mode, and submit any changes"
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ root: string; area: string; label: string; preview: string; input: string; control: string; submitTrigger: string; cancelTrigger: string; editTrigger: string; }>",
        "description": "The ids of the elements in the editable. Useful for composition."
      },
      "invalid": {
        "type": "boolean",
        "description": "Whether the input's value is invalid."
      },
      "name": {
        "type": "string",
        "description": "The name attribute of the editable component. Used for form submission."
      },
      "form": {
        "type": "string",
        "description": "The associate form of the underlying input."
      },
      "autoResize": {
        "type": "boolean",
        "description": "Whether the editable should auto-resize to fit the content."
      },
      "activationMode": {
        "type": "ActivationMode",
        "description": "The activation mode for the preview element.\n\n- \"focus\" - Enter edit mode when the preview is focused\n- \"dblclick\" - Enter edit mode when the preview is double-clicked\n- \"click\" - Enter edit mode when the preview is clicked",
        "defaultValue": "\"focus\""
      },
      "submitMode": {
        "type": "SubmitMode",
        "description": "The action that triggers submit in the edit mode:\n\n- \"enter\" - Trigger submit when the enter key is pressed\n- \"blur\" - Trigger submit when the editable is blurred\n- \"none\" - No action will trigger submit. You need to use the submit button\n- \"both\" - Pressing `Enter` and blurring the input will trigger submit",
        "defaultValue": "\"both\""
      },
      "selectOnFocus": {
        "type": "boolean",
        "description": "Whether to select the text in the input when it is focused.",
        "defaultValue": "true"
      },
      "edit": {
        "type": "boolean",
        "description": "Whether the editable is in edit mode."
      },
      "defaultEdit": {
        "type": "boolean",
        "description": "Whether the editable is in edit mode by default."
      },
      "onEditChange": {
        "type": "(details: EditChangeDetails) => void",
        "description": "Function to call when the edit mode changes."
      },
      "maxLength": {
        "type": "number",
        "description": "The maximum number of characters allowed in the editable"
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the editable is disabled."
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the editable is read-only."
      },
      "required": {
        "type": "boolean",
        "description": "Whether the editable is required."
      },
      "placeholder": {
        "type": "string | { edit: string; preview: string; }",
        "description": "The placeholder text for the editable."
      },
      "translations": {
        "type": "IntlTranslations",
        "description": "The translations for the editable."
      },
      "finalFocusEl": {
        "type": "() => HTMLElement",
        "description": "The element to receive focus when the editable is closed."
      },
      "value": {
        "type": "string",
        "description": "The controlled value of the editable."
      },
      "defaultValue": {
        "type": "string",
        "description": "The initial value of the editable when rendered.\nUse when you don't need to control the value of the editable."
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails) => void",
        "description": "Function to call when the value changes."
      },
      "onValueRevert": {
        "type": "(details: ValueChangeDetails) => void",
        "description": "Function to call when the value is reverted."
      },
      "onValueCommit": {
        "type": "(details: ValueChangeDetails) => void",
        "description": "Function to call when the value is committed."
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => Node | ShadowRoot | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "onPointerDownOutside": {
        "type": "(event: PointerDownOutsideEvent) => void",
        "description": "Function called when the pointer is pressed down outside the component"
      },
      "onFocusOutside": {
        "type": "(event: FocusOutsideEvent) => void",
        "description": "Function called when the focus is moved outside the component"
      },
      "onInteractOutside": {
        "type": "(event: InteractOutsideEvent) => void",
        "description": "Function called when an interaction happens outside the component"
      }
    }
  },
  "file-upload": {
    "api": {
      "dragging": {
        "type": "boolean",
        "description": "Whether the user is dragging something over the root element"
      },
      "focused": {
        "type": "boolean",
        "description": "Whether the user is focused on the dropzone element"
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the file input is disabled"
      },
      "openFilePicker": {
        "type": "() => void",
        "description": "Function to open the file dialog"
      },
      "deleteFile": {
        "type": "(file: File) => void",
        "description": "Function to delete the file from the list"
      },
      "acceptedFiles": {
        "type": "File[]",
        "description": "The accepted files that have been dropped or selected"
      },
      "rejectedFiles": {
        "type": "FileRejection[]",
        "description": "The files that have been rejected"
      },
      "setFiles": {
        "type": "(files: File[]) => void",
        "description": "Function to set the value"
      },
      "clearFiles": {
        "type": "() => void",
        "description": "Function to clear the value"
      },
      "clearRejectedFiles": {
        "type": "() => void",
        "description": "Function to clear the rejected files"
      },
      "getFileSize": {
        "type": "(file: File) => string",
        "description": "Function to format the file size (e.g. 1.2MB)"
      },
      "createFileUrl": {
        "type": "(file: File, cb: (url: string) => void) => VoidFunction",
        "description": "Function to get the preview url of a file.\nReturns a function to revoke the url."
      },
      "setClipboardFiles": {
        "type": "(dt: DataTransfer) => boolean",
        "description": "Function to set the clipboard files.\nReturns `true` if the clipboard data contains files, `false` otherwise."
      }
    },
    "context": {
      "name": {
        "type": "string",
        "description": "The name of the underlying file input"
      },
      "ids": {
        "type": "Partial<{ root: string; dropzone: string; hiddenInput: string; trigger: string; label: string; item(id: string): string; itemName(id: string): string; itemSizeText(id: string): string; itemPreview(id: string): string; }>",
        "description": "The ids of the elements. Useful for composition."
      },
      "translations": {
        "type": "IntlTranslations",
        "description": "The localized messages to use."
      },
      "accept": {
        "type": "Record<string, string[]> | FileMimeType[]",
        "description": "The accept file types"
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the file input is disabled"
      },
      "required": {
        "type": "boolean",
        "description": "Whether the file input is required"
      },
      "allowDrop": {
        "type": "boolean",
        "description": "Whether to allow drag and drop in the dropzone element",
        "defaultValue": "true"
      },
      "maxFileSize": {
        "type": "number",
        "description": "The maximum file size in bytes",
        "defaultValue": "Infinity"
      },
      "minFileSize": {
        "type": "number",
        "description": "The minimum file size in bytes",
        "defaultValue": "0"
      },
      "maxFiles": {
        "type": "number",
        "description": "The maximum number of files",
        "defaultValue": "1"
      },
      "preventDocumentDrop": {
        "type": "boolean",
        "description": "Whether to prevent the drop event on the document",
        "defaultValue": "true"
      },
      "validate": {
        "type": "(file: File, details: FileValidateDetails) => FileError[]",
        "description": "Function to validate a file"
      },
      "onFileChange": {
        "type": "(details: FileChangeDetails) => void",
        "description": "Function called when the value changes, whether accepted or rejected"
      },
      "onFileAccept": {
        "type": "(details: FileAcceptDetails) => void",
        "description": "Function called when the file is accepted"
      },
      "onFileReject": {
        "type": "(details: FileRejectDetails) => void",
        "description": "Function called when the file is rejected"
      },
      "capture": {
        "type": "\"user\" | \"environment\"",
        "description": "The default camera to use when capturing media"
      },
      "directory": {
        "type": "boolean",
        "description": "Whether to accept directories, only works in webkit browsers"
      },
      "invalid": {
        "type": "boolean",
        "description": "Whether the file input is invalid"
      },
      "locale": {
        "type": "string",
        "description": "The current locale. Based on the BCP 47 definition.",
        "defaultValue": "\"en-US\""
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  },
  "floating-panel": {
    "api": {
      "open": {
        "type": "boolean",
        "description": "Whether the panel is open"
      },
      "setOpen": {
        "type": "(open: boolean) => void",
        "description": "Function to open or close the panel"
      },
      "dragging": {
        "type": "boolean",
        "description": "Whether the panel is being dragged"
      },
      "resizing": {
        "type": "boolean",
        "description": "Whether the panel is being resized"
      },
      "position": {
        "type": "Point",
        "description": "The position of the panel"
      },
      "setPosition": {
        "type": "(position: Point) => void",
        "description": "Function to set the position of the panel"
      },
      "size": {
        "type": "Size",
        "description": "The size of the panel"
      },
      "setSize": {
        "type": "(size: Size) => void",
        "description": "Function to set the size of the panel"
      },
      "minimize": {
        "type": "() => void",
        "description": "Function to minimize the panel"
      },
      "maximize": {
        "type": "() => void",
        "description": "Function to maximize the panel"
      },
      "restore": {
        "type": "() => void",
        "description": "Function to restore the panel before it was minimized or maximized"
      },
      "resizable": {
        "type": "boolean",
        "description": "Whether the panel is resizable"
      },
      "draggable": {
        "type": "boolean",
        "description": "Whether the panel is draggable"
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ trigger: string; positioner: string; content: string; title: string; header: string; }>",
        "description": "The ids of the elements in the floating panel. Useful for composition."
      },
      "translations": {
        "type": "IntlTranslations",
        "description": "The translations for the floating panel."
      },
      "strategy": {
        "type": "\"absolute\" | \"fixed\"",
        "description": "The strategy to use for positioning",
        "defaultValue": "\"fixed\""
      },
      "allowOverflow": {
        "type": "boolean",
        "description": "Whether the panel should be strictly contained within the boundary when dragging",
        "defaultValue": "true"
      },
      "open": {
        "type": "boolean",
        "description": "The controlled open state of the panel"
      },
      "defaultOpen": {
        "type": "boolean",
        "description": "The initial open state of the panel when rendered.\nUse when you don't need to control the open state of the panel.",
        "defaultValue": "false"
      },
      "draggable": {
        "type": "boolean",
        "description": "Whether the panel is draggable",
        "defaultValue": "true"
      },
      "resizable": {
        "type": "boolean",
        "description": "Whether the panel is resizable",
        "defaultValue": "true"
      },
      "size": {
        "type": "Size",
        "description": "The size of the panel"
      },
      "defaultSize": {
        "type": "Size",
        "description": "The default size of the panel"
      },
      "minSize": {
        "type": "Size",
        "description": "The minimum size of the panel"
      },
      "maxSize": {
        "type": "Size",
        "description": "The maximum size of the panel"
      },
      "position": {
        "type": "Point",
        "description": "The controlled position of the panel"
      },
      "defaultPosition": {
        "type": "Point",
        "description": "The initial position of the panel when rendered.\nUse when you don't need to control the position of the panel."
      },
      "getAnchorPosition": {
        "type": "(details: AnchorPositionDetails) => Point",
        "description": "Function that returns the initial position of the panel when it is opened.\nIf provided, will be used instead of the default position."
      },
      "lockAspectRatio": {
        "type": "boolean",
        "description": "Whether the panel is locked to its aspect ratio"
      },
      "closeOnEscape": {
        "type": "boolean",
        "description": "Whether the panel should close when the escape key is pressed"
      },
      "getBoundaryEl": {
        "type": "() => HTMLElement",
        "description": "The boundary of the panel. Useful for recalculating the boundary rect when\nthe it is resized."
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the panel is disabled"
      },
      "onPositionChange": {
        "type": "(details: PositionChangeDetails) => void",
        "description": "Function called when the position of the panel changes via dragging"
      },
      "onPositionChangeEnd": {
        "type": "(details: PositionChangeDetails) => void",
        "description": "Function called when the position of the panel changes via dragging ends"
      },
      "onOpenChange": {
        "type": "(details: OpenChangeDetails) => void",
        "description": "Function called when the panel is opened or closed"
      },
      "onSizeChange": {
        "type": "(details: SizeChangeDetails) => void",
        "description": "Function called when the size of the panel changes via resizing"
      },
      "onSizeChangeEnd": {
        "type": "(details: SizeChangeDetails) => void",
        "description": "Function called when the size of the panel changes via resizing ends"
      },
      "persistRect": {
        "type": "boolean",
        "description": "Whether the panel size and position should be preserved when it is closed"
      },
      "gridSize": {
        "type": "number",
        "description": "The snap grid for the panel",
        "defaultValue": "1"
      },
      "onStageChange": {
        "type": "(details: StageChangeDetails) => void",
        "description": "Function called when the stage of the panel changes"
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => Node | ShadowRoot | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  },
  "hover-card": {
    "api": {
      "open": {
        "type": "boolean",
        "description": "Whether the hover card is open"
      },
      "setOpen": {
        "type": "(open: boolean) => void",
        "description": "Function to open the hover card"
      },
      "reposition": {
        "type": "(options?: Partial<PositioningOptions>) => void",
        "description": "Function to reposition the popover"
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ trigger: string; content: string; positioner: string; arrow: string; }>",
        "description": "The ids of the elements in the popover. Useful for composition."
      },
      "onOpenChange": {
        "type": "(details: OpenChangeDetails) => void",
        "description": "Function called when the hover card opens or closes."
      },
      "openDelay": {
        "type": "number",
        "description": "The duration from when the mouse enters the trigger until the hover card opens.",
        "defaultValue": "700"
      },
      "closeDelay": {
        "type": "number",
        "description": "The duration from when the mouse leaves the trigger or content until the hover card closes.",
        "defaultValue": "300"
      },
      "open": {
        "type": "boolean",
        "description": "The controlled open state of the hover card"
      },
      "defaultOpen": {
        "type": "boolean",
        "description": "The initial open state of the hover card when rendered.\nUse when you don't need to control the open state of the hover card."
      },
      "positioning": {
        "type": "PositioningOptions",
        "description": "The user provided options used to position the popover content"
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "onPointerDownOutside": {
        "type": "(event: PointerDownOutsideEvent) => void",
        "description": "Function called when the pointer is pressed down outside the component"
      },
      "onFocusOutside": {
        "type": "(event: FocusOutsideEvent) => void",
        "description": "Function called when the focus is moved outside the component"
      },
      "onInteractOutside": {
        "type": "(event: InteractOutsideEvent) => void",
        "description": "Function called when an interaction happens outside the component"
      }
    }
  },
  "listbox": {
    "api": {
      "empty": {
        "type": "boolean",
        "description": "Whether the select value is empty"
      },
      "highlightedValue": {
        "type": "string",
        "description": "The value of the highlighted item"
      },
      "highlightedItem": {
        "type": "V",
        "description": "The highlighted item"
      },
      "highlightValue": {
        "type": "(value: string) => void",
        "description": "Function to highlight a value"
      },
      "clearHighlightedValue": {
        "type": "() => void",
        "description": "Function to clear the highlighted value"
      },
      "selectedItems": {
        "type": "V[]",
        "description": "The selected items"
      },
      "hasSelectedItems": {
        "type": "boolean",
        "description": "Whether there's a selected option"
      },
      "value": {
        "type": "string[]",
        "description": "The selected item keys"
      },
      "valueAsString": {
        "type": "string",
        "description": "The string representation of the selected items"
      },
      "selectValue": {
        "type": "(value: string) => void",
        "description": "Function to select a value"
      },
      "selectAll": {
        "type": "() => void",
        "description": "Function to select all values.\n\n**Note**: This should only be called when the selectionMode is `multiple` or `extended`.\nOtherwise, an exception will be thrown."
      },
      "setValue": {
        "type": "(value: string[]) => void",
        "description": "Function to set the value of the select"
      },
      "clearValue": {
        "type": "(value?: string) => void",
        "description": "Function to clear the value of the select.\nIf a value is provided, it will only clear that value, otherwise, it will clear all values."
      },
      "getItemState": {
        "type": "(props: ItemProps<any>) => ItemState",
        "description": "Returns the state of a select item"
      },
      "collection": {
        "type": "ListCollection<V>",
        "description": "Function to toggle the select"
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the select is disabled"
      }
    },
    "context": {
      "collection": {
        "type": "GridCollection<T>",
        "description": "The item collection"
      },
      "ids": {
        "type": "Partial<{ root: string; content: string; label: string; item(id: string | number): string; itemGroup(id: string | number): string; itemGroupLabel(id: string | number): string; }>",
        "description": "The ids of the elements in the listbox. Useful for composition."
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the listbox is disabled"
      },
      "disallowSelectAll": {
        "type": "boolean",
        "description": "Whether to disallow selecting all items when `meta+a` is pressed"
      },
      "onHighlightChange": {
        "type": "(details: HighlightChangeDetails<T>) => void",
        "description": "The callback fired when the highlighted item changes."
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails<T>) => void",
        "description": "The callback fired when the selected item changes."
      },
      "value": {
        "type": "string[]",
        "description": "The controlled keys of the selected items"
      },
      "defaultValue": {
        "type": "string[]",
        "description": "The initial default value of the listbox when rendered.\nUse when you don't need to control the value of the listbox.",
        "defaultValue": "[]"
      },
      "highlightedValue": {
        "type": "string",
        "description": "The controlled key of the highlighted item"
      },
      "defaultHighlightedValue": {
        "type": "string",
        "description": "The initial value of the highlighted item when opened.\nUse when you don't need to control the highlighted value of the listbox."
      },
      "loopFocus": {
        "type": "boolean",
        "description": "Whether to loop the keyboard navigation through the options",
        "defaultValue": "false"
      },
      "selectionMode": {
        "type": "SelectionMode",
        "description": "How multiple selection should behave in the listbox.\n\n- `single`: The user can select a single item.\n- `multiple`: The user can select multiple items without using modifier keys.\n- `extended`: The user can select multiple items by using modifier keys.",
        "defaultValue": "\"single\""
      },
      "scrollToIndexFn": {
        "type": "(details: ScrollToIndexDetails) => void",
        "description": "Function to scroll to a specific index"
      },
      "selectOnHighlight": {
        "type": "boolean",
        "description": "Whether to select the item when it is highlighted"
      },
      "deselectable": {
        "type": "boolean",
        "description": "Whether to disallow empty selection"
      },
      "typeahead": {
        "type": "boolean",
        "description": "Whether to enable typeahead on the listbox"
      },
      "onSelect": {
        "type": "(details: SelectionDetails) => void",
        "description": "Function called when an item is selected"
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "orientation": {
        "type": "\"horizontal\" | \"vertical\"",
        "description": "The orientation of the element.",
        "defaultValue": "\"horizontal\""
      }
    }
  },
  "menu": {
    "api": {
      "open": {
        "type": "boolean",
        "description": "Whether the menu is open"
      },
      "setOpen": {
        "type": "(open: boolean) => void",
        "description": "Function to open or close the menu"
      },
      "highlightedValue": {
        "type": "string",
        "description": "The id of the currently highlighted menuitem"
      },
      "setHighlightedValue": {
        "type": "(value: string) => void",
        "description": "Function to set the highlighted menuitem"
      },
      "setParent": {
        "type": "(parent: MenuService) => void",
        "description": "Function to register a parent menu. This is used for submenus"
      },
      "setChild": {
        "type": "(child: MenuService) => void",
        "description": "Function to register a child menu. This is used for submenus"
      },
      "reposition": {
        "type": "(options?: Partial<PositioningOptions>) => void",
        "description": "Function to reposition the popover"
      },
      "getOptionItemState": {
        "type": "(props: OptionItemProps) => OptionItemState",
        "description": "Returns the state of the option item"
      },
      "getItemState": {
        "type": "(props: ItemProps) => ItemState",
        "description": "Returns the state of the menu item"
      },
      "addItemListener": {
        "type": "(props: ItemListenerProps) => VoidFunction",
        "description": "Setup the custom event listener for item selection event"
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ trigger: string; contextTrigger: string; content: string; groupLabel(id: string): string; group(id: string): string; positioner: string; arrow: string; }>",
        "description": "The ids of the elements in the menu. Useful for composition."
      },
      "defaultHighlightedValue": {
        "type": "string",
        "description": "The initial highlighted value of the menu item when rendered.\nUse when you don't need to control the highlighted value of the menu item."
      },
      "highlightedValue": {
        "type": "string",
        "description": "The controlled highlighted value of the menu item."
      },
      "onHighlightChange": {
        "type": "(details: HighlightChangeDetails) => void",
        "description": "Function called when the highlighted menu item changes."
      },
      "onSelect": {
        "type": "(details: SelectionDetails) => void",
        "description": "Function called when a menu item is selected."
      },
      "anchorPoint": {
        "type": "Point",
        "description": "The positioning point for the menu. Can be set by the context menu trigger or the button trigger."
      },
      "loopFocus": {
        "type": "boolean",
        "description": "Whether to loop the keyboard navigation.",
        "defaultValue": "false"
      },
      "positioning": {
        "type": "PositioningOptions",
        "description": "The options used to dynamically position the menu"
      },
      "closeOnSelect": {
        "type": "boolean",
        "description": "Whether to close the menu when an option is selected",
        "defaultValue": "true"
      },
      "aria-label": {
        "type": "string",
        "description": "The accessibility label for the menu"
      },
      "open": {
        "type": "boolean",
        "description": "The controlled open state of the menu"
      },
      "onOpenChange": {
        "type": "(details: OpenChangeDetails) => void",
        "description": "Function called when the menu opens or closes"
      },
      "defaultOpen": {
        "type": "boolean",
        "description": "The initial open state of the menu when rendered.\nUse when you don't need to control the open state of the menu."
      },
      "typeahead": {
        "type": "boolean",
        "description": "Whether the pressing printable characters should trigger typeahead navigation",
        "defaultValue": "true"
      },
      "composite": {
        "type": "boolean",
        "description": "Whether the menu is a composed with other composite widgets like a combobox or tabs",
        "defaultValue": "true"
      },
      "navigate": {
        "type": "(details: NavigateDetails) => void",
        "description": "Function to navigate to the selected item if it's an anchor element"
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "onEscapeKeyDown": {
        "type": "(event: KeyboardEvent) => void",
        "description": "Function called when the escape key is pressed"
      },
      "onPointerDownOutside": {
        "type": "(event: PointerDownOutsideEvent) => void",
        "description": "Function called when the pointer is pressed down outside the component"
      },
      "onFocusOutside": {
        "type": "(event: FocusOutsideEvent) => void",
        "description": "Function called when the focus is moved outside the component"
      },
      "onInteractOutside": {
        "type": "(event: InteractOutsideEvent) => void",
        "description": "Function called when an interaction happens outside the component"
      }
    }
  },
  "navigation-menu": {
    "api": {
      "value": {
        "type": "string",
        "description": "The current value of the menu"
      },
      "setValue": {
        "type": "(value: string) => void",
        "description": "Sets the value of the menu"
      },
      "open": {
        "type": "boolean",
        "description": "Whether the menu is open"
      },
      "setParent": {
        "type": "(parent: NavigationMenuService) => void",
        "description": "Sets the parent of the menu"
      },
      "setChild": {
        "type": "(child: NavigationMenuService) => void",
        "description": "Sets the child of the menu"
      },
      "orientation": {
        "type": "Orientation",
        "description": "The orientation of the menu"
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ root: string; list: string; item: string; indicator: string; trigger: string; content: string; viewport: string; }>",
        "description": "The ids of the elements in the machine."
      },
      "value": {
        "type": "string",
        "description": "The controlled value of the navigation menu"
      },
      "defaultValue": {
        "type": "string",
        "description": "The default value of the navigation menu.\nUse when you don't want to control the value of the menu."
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails) => void",
        "description": "Function called when the value of the menu changes"
      },
      "openDelay": {
        "type": "number",
        "description": "The delay before the menu opens",
        "defaultValue": "200"
      },
      "closeDelay": {
        "type": "number",
        "description": "The delay before the menu closes",
        "defaultValue": "300"
      },
      "disableClickTrigger": {
        "type": "boolean",
        "description": "Whether to disable the click trigger"
      },
      "disableHoverTrigger": {
        "type": "boolean",
        "description": "Whether to disable the hover trigger"
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "orientation": {
        "type": "\"horizontal\" | \"vertical\"",
        "description": "The orientation of the element.",
        "defaultValue": "\"horizontal\""
      }
    }
  },
  "number-input": {
    "api": {
      "focused": {
        "type": "boolean",
        "description": "Whether the input is focused."
      },
      "invalid": {
        "type": "boolean",
        "description": "Whether the input is invalid."
      },
      "empty": {
        "type": "boolean",
        "description": "Whether the input value is empty."
      },
      "value": {
        "type": "string",
        "description": "The formatted value of the input."
      },
      "valueAsNumber": {
        "type": "number",
        "description": "The value of the input as a number."
      },
      "setValue": {
        "type": "(value: number) => void",
        "description": "Function to set the value of the input."
      },
      "clearValue": {
        "type": "() => void",
        "description": "Function to clear the value of the input."
      },
      "increment": {
        "type": "() => void",
        "description": "Function to increment the value of the input by the step."
      },
      "decrement": {
        "type": "() => void",
        "description": "Function to decrement the value of the input by the step."
      },
      "setToMax": {
        "type": "() => void",
        "description": "Function to set the value of the input to the max."
      },
      "setToMin": {
        "type": "() => void",
        "description": "Function to set the value of the input to the min."
      },
      "focus": {
        "type": "() => void",
        "description": "Function to focus the input."
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ root: string; label: string; input: string; incrementTrigger: string; decrementTrigger: string; scrubber: string; }>",
        "description": "The ids of the elements in the number input. Useful for composition."
      },
      "name": {
        "type": "string",
        "description": "The name attribute of the number input. Useful for form submission."
      },
      "form": {
        "type": "string",
        "description": "The associate form of the input element."
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the number input is disabled."
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the number input is readonly"
      },
      "invalid": {
        "type": "boolean",
        "description": "Whether the number input value is invalid."
      },
      "required": {
        "type": "boolean",
        "description": "Whether the number input is required"
      },
      "pattern": {
        "type": "string",
        "description": "The pattern used to check the <input> element's value against",
        "defaultValue": "\"[0-9]*(.[0-9]+)?\""
      },
      "value": {
        "type": "string",
        "description": "The controlled value of the input"
      },
      "defaultValue": {
        "type": "string",
        "description": "The initial value of the input when rendered.\nUse when you don't need to control the value of the input."
      },
      "min": {
        "type": "number",
        "description": "The minimum value of the number input",
        "defaultValue": "Number.MIN_SAFE_INTEGER"
      },
      "max": {
        "type": "number",
        "description": "The maximum value of the number input",
        "defaultValue": "Number.MAX_SAFE_INTEGER"
      },
      "step": {
        "type": "number",
        "description": "The amount to increment or decrement the value by",
        "defaultValue": "1"
      },
      "allowMouseWheel": {
        "type": "boolean",
        "description": "Whether to allow mouse wheel to change the value"
      },
      "allowOverflow": {
        "type": "boolean",
        "description": "Whether to allow the value overflow the min/max range",
        "defaultValue": "true"
      },
      "clampValueOnBlur": {
        "type": "boolean",
        "description": "Whether to clamp the value when the input loses focus (blur)",
        "defaultValue": "true"
      },
      "focusInputOnChange": {
        "type": "boolean",
        "description": "Whether to focus input when the value changes",
        "defaultValue": "true"
      },
      "translations": {
        "type": "IntlTranslations",
        "description": "Specifies the localized strings that identifies the accessibility elements and their states"
      },
      "formatOptions": {
        "type": "Intl.NumberFormatOptions",
        "description": "The options to pass to the `Intl.NumberFormat` constructor"
      },
      "inputMode": {
        "type": "InputMode",
        "description": "Hints at the type of data that might be entered by the user. It also determines\nthe type of keyboard shown to the user on mobile devices",
        "defaultValue": "\"decimal\""
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails) => void",
        "description": "Function invoked when the value changes"
      },
      "onValueInvalid": {
        "type": "(details: ValueInvalidDetails) => void",
        "description": "Function invoked when the value overflows or underflows the min/max range"
      },
      "onFocusChange": {
        "type": "(details: FocusChangeDetails) => void",
        "description": "Function invoked when the number input is focused"
      },
      "spinOnPress": {
        "type": "boolean",
        "description": "Whether to spin the value when the increment/decrement button is pressed",
        "defaultValue": "true"
      },
      "locale": {
        "type": "string",
        "description": "The current locale. Based on the BCP 47 definition.",
        "defaultValue": "\"en-US\""
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  },
  "pagination": {
    "api": {
      "page": {
        "type": "number",
        "description": "The current page."
      },
      "count": {
        "type": "number",
        "description": "The total number of data items."
      },
      "pageSize": {
        "type": "number",
        "description": "The number of data items per page."
      },
      "totalPages": {
        "type": "number",
        "description": "The total number of pages."
      },
      "pages": {
        "type": "Pages",
        "description": "The page range. Represented as an array of page numbers (including ellipsis)"
      },
      "previousPage": {
        "type": "number",
        "description": "The previous page."
      },
      "nextPage": {
        "type": "number",
        "description": "The next page."
      },
      "pageRange": {
        "type": "PageRange",
        "description": "The page range. Represented as an object with `start` and `end` properties."
      },
      "slice": {
        "type": "<V>(data: V[]) => V[]",
        "description": "Function to slice an array of data based on the current page."
      },
      "setPageSize": {
        "type": "(size: number) => void",
        "description": "Function to set the page size."
      },
      "setPage": {
        "type": "(page: number) => void",
        "description": "Function to set the current page."
      },
      "goToNextPage": {
        "type": "() => void",
        "description": "Function to go to the next page."
      },
      "goToPrevPage": {
        "type": "() => void",
        "description": "Function to go to the previous page."
      },
      "goToFirstPage": {
        "type": "() => void",
        "description": "Function to go to the first page."
      },
      "goToLastPage": {
        "type": "() => void",
        "description": "Function to go to the last page."
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ root: string; ellipsis(index: number): string; prevTrigger: string; nextTrigger: string; item(page: number): string; }>",
        "description": "The ids of the elements in the accordion. Useful for composition."
      },
      "translations": {
        "type": "IntlTranslations",
        "description": "Specifies the localized strings that identifies the accessibility elements and their states"
      },
      "count": {
        "type": "number",
        "description": "Total number of data items"
      },
      "pageSize": {
        "type": "number",
        "description": "The controlled number of data items per page"
      },
      "defaultPageSize": {
        "type": "number",
        "description": "The initial number of data items per page when rendered.\nUse when you don't need to control the page size of the pagination.",
        "defaultValue": "10"
      },
      "siblingCount": {
        "type": "number",
        "description": "Number of pages to show beside active page",
        "defaultValue": "1"
      },
      "page": {
        "type": "number",
        "description": "The controlled active page"
      },
      "defaultPage": {
        "type": "number",
        "description": "The initial active page when rendered.\nUse when you don't need to control the active page of the pagination.",
        "defaultValue": "1"
      },
      "onPageChange": {
        "type": "(details: PageChangeDetails) => void",
        "description": "Called when the page number is changed"
      },
      "onPageSizeChange": {
        "type": "(details: PageSizeChangeDetails) => void",
        "description": "Called when the page size is changed"
      },
      "type": {
        "type": "\"button\" | \"link\"",
        "description": "The type of the trigger element",
        "defaultValue": "\"button\""
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  },
  "pin-input": {
    "api": {
      "value": {
        "type": "string[]",
        "description": "The value of the input as an array of strings."
      },
      "valueAsString": {
        "type": "string",
        "description": "The value of the input as a string."
      },
      "complete": {
        "type": "boolean",
        "description": "Whether all inputs are filled."
      },
      "count": {
        "type": "number",
        "description": "The number of inputs to render"
      },
      "items": {
        "type": "number[]",
        "description": "The array of input values."
      },
      "setValue": {
        "type": "(value: string[]) => void",
        "description": "Function to set the value of the inputs."
      },
      "clearValue": {
        "type": "() => void",
        "description": "Function to clear the value of the inputs."
      },
      "setValueAtIndex": {
        "type": "(index: number, value: string) => void",
        "description": "Function to set the value of the input at a specific index."
      },
      "focus": {
        "type": "() => void",
        "description": "Function to focus the pin-input. This will focus the first input."
      }
    },
    "context": {
      "name": {
        "type": "string",
        "description": "The name of the input element. Useful for form submission."
      },
      "form": {
        "type": "string",
        "description": "The associate form of the underlying input element."
      },
      "pattern": {
        "type": "string",
        "description": "The regular expression that the user-entered input value is checked against."
      },
      "ids": {
        "type": "Partial<{ root: string; hiddenInput: string; label: string; control: string; input(id: string): string; }>",
        "description": "The ids of the elements in the pin input. Useful for composition."
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the inputs are disabled"
      },
      "placeholder": {
        "type": "string",
        "description": "The placeholder text for the input",
        "defaultValue": "\"○\""
      },
      "autoFocus": {
        "type": "boolean",
        "description": "Whether to auto-focus the first input."
      },
      "invalid": {
        "type": "boolean",
        "description": "Whether the pin input is in the invalid state"
      },
      "required": {
        "type": "boolean",
        "description": "Whether the pin input is required"
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the pin input is in the valid state"
      },
      "otp": {
        "type": "boolean",
        "description": "If `true`, the pin input component signals to its fields that they should\nuse `autocomplete=\"one-time-code\"`."
      },
      "value": {
        "type": "string[]",
        "description": "The controlled value of the the pin input."
      },
      "defaultValue": {
        "type": "string[]",
        "description": "The initial value of the the pin input when rendered.\nUse when you don't need to control the value of the pin input."
      },
      "type": {
        "type": "\"alphanumeric\" | \"numeric\" | \"alphabetic\"",
        "description": "The type of value the pin-input should allow",
        "defaultValue": "\"numeric\""
      },
      "onValueComplete": {
        "type": "(details: ValueChangeDetails) => void",
        "description": "Function called when all inputs have valid values"
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails) => void",
        "description": "Function called on input change"
      },
      "onValueInvalid": {
        "type": "(details: ValueInvalidDetails) => void",
        "description": "Function called when an invalid value is entered"
      },
      "mask": {
        "type": "boolean",
        "description": "If `true`, the input's value will be masked just like `type=password`"
      },
      "blurOnComplete": {
        "type": "boolean",
        "description": "Whether to blur the input when the value is complete"
      },
      "selectOnFocus": {
        "type": "boolean",
        "description": "Whether to select input value when input is focused"
      },
      "translations": {
        "type": "IntlTranslations",
        "description": "Specifies the localized strings that identifies the accessibility elements and their states"
      },
      "count": {
        "type": "number",
        "description": "The number of inputs to render to improve SSR aria attributes.\nThis will be required in next major version."
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  },
  "popover": {
    "api": {
      "portalled": {
        "type": "boolean",
        "description": "Whether the popover is portalled."
      },
      "open": {
        "type": "boolean",
        "description": "Whether the popover is open"
      },
      "setOpen": {
        "type": "(open: boolean) => void",
        "description": "Function to open or close the popover"
      },
      "reposition": {
        "type": "(options?: Partial<PositioningOptions>) => void",
        "description": "Function to reposition the popover"
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ anchor: string; trigger: string; content: string; title: string; description: string; closeTrigger: string; positioner: string; arrow: string; }>",
        "description": "The ids of the elements in the popover. Useful for composition."
      },
      "modal": {
        "type": "boolean",
        "description": "Whether the popover should be modal. When set to `true`:\n- interaction with outside elements will be disabled\n- only popover content will be visible to screen readers\n- scrolling is blocked\n- focus is trapped within the popover",
        "defaultValue": "false"
      },
      "portalled": {
        "type": "boolean",
        "description": "Whether the popover is portalled. This will proxy the tabbing behavior regardless of the DOM position\nof the popover content.",
        "defaultValue": "true"
      },
      "autoFocus": {
        "type": "boolean",
        "description": "Whether to automatically set focus on the first focusable\ncontent within the popover when opened.",
        "defaultValue": "true"
      },
      "initialFocusEl": {
        "type": "() => HTMLElement",
        "description": "The element to focus on when the popover is opened."
      },
      "closeOnInteractOutside": {
        "type": "boolean",
        "description": "Whether to close the popover when the user clicks outside of the popover.",
        "defaultValue": "true"
      },
      "closeOnEscape": {
        "type": "boolean",
        "description": "Whether to close the popover when the escape key is pressed.",
        "defaultValue": "true"
      },
      "onOpenChange": {
        "type": "(details: OpenChangeDetails) => void",
        "description": "Function invoked when the popover opens or closes"
      },
      "positioning": {
        "type": "PositioningOptions",
        "description": "The user provided options used to position the popover content"
      },
      "open": {
        "type": "boolean",
        "description": "The controlled open state of the popover"
      },
      "defaultOpen": {
        "type": "boolean",
        "description": "The initial open state of the popover when rendered.\nUse when you don't need to control the open state of the popover."
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => Node | ShadowRoot | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "onEscapeKeyDown": {
        "type": "(event: KeyboardEvent) => void",
        "description": "Function called when the escape key is pressed"
      },
      "onPointerDownOutside": {
        "type": "(event: PointerDownOutsideEvent) => void",
        "description": "Function called when the pointer is pressed down outside the component"
      },
      "onFocusOutside": {
        "type": "(event: FocusOutsideEvent) => void",
        "description": "Function called when the focus is moved outside the component"
      },
      "onInteractOutside": {
        "type": "(event: InteractOutsideEvent) => void",
        "description": "Function called when an interaction happens outside the component"
      },
      "persistentElements": {
        "type": "(() => Element)[]",
        "description": "Returns the persistent elements that:\n- should not have pointer-events disabled\n- should not trigger the dismiss event"
      }
    }
  },
  "presence": {
    "api": {
      "skip": {
        "type": "boolean",
        "description": "Whether the animation should be skipped."
      },
      "present": {
        "type": "boolean",
        "description": "Whether the node is present in the DOM."
      },
      "setNode": {
        "type": "(node: HTMLElement) => void",
        "description": "Function to set the node (as early as possible)"
      },
      "unmount": {
        "type": "() => void",
        "description": "Function to programmatically unmount the node"
      }
    },
    "context": {
      "present": {
        "type": "boolean",
        "description": "Whether the node is present (controlled by the user)"
      },
      "onExitComplete": {
        "type": "VoidFunction",
        "description": "Function called when the animation ends in the closed state"
      },
      "immediate": {
        "type": "boolean",
        "description": "Whether to synchronize the present change immediately or defer it to the next frame"
      }
    }
  },
  "progress": {
    "api": {
      "value": {
        "type": "number",
        "description": "The current value of the progress bar."
      },
      "valueAsString": {
        "type": "string",
        "description": "The current value of the progress bar as a string."
      },
      "setValue": {
        "type": "(value: number) => void",
        "description": "Sets the current value of the progress bar."
      },
      "setToMax": {
        "type": "() => void",
        "description": "Sets the current value of the progress bar to the max value."
      },
      "setToMin": {
        "type": "() => void",
        "description": "Sets the current value of the progress bar to the min value."
      },
      "percent": {
        "type": "number",
        "description": "The percentage of the progress bar's value."
      },
      "percentAsString": {
        "type": "string",
        "description": "The percentage of the progress bar's value as a string."
      },
      "min": {
        "type": "number",
        "description": "The minimum allowed value of the progress bar."
      },
      "max": {
        "type": "number",
        "description": "The maximum allowed value of the progress bar."
      },
      "indeterminate": {
        "type": "boolean",
        "description": "Whether the progress bar is indeterminate."
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ root: string; track: string; label: string; circle: string; }>",
        "description": "The ids of the elements in the progress bar. Useful for composition."
      },
      "value": {
        "type": "number",
        "description": "The controlled value of the progress bar."
      },
      "defaultValue": {
        "type": "number",
        "description": "The initial value of the progress bar when rendered.\nUse when you don't need to control the value of the progress bar.",
        "defaultValue": "50"
      },
      "min": {
        "type": "number",
        "description": "The minimum allowed value of the progress bar.",
        "defaultValue": "0"
      },
      "max": {
        "type": "number",
        "description": "The maximum allowed value of the progress bar.",
        "defaultValue": "100"
      },
      "translations": {
        "type": "IntlTranslations",
        "description": "The localized messages to use."
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails) => void",
        "description": "Callback fired when the value changes."
      },
      "formatOptions": {
        "type": "Intl.NumberFormatOptions",
        "description": "The options to use for formatting the value.",
        "defaultValue": "{ style: \"percent\" }"
      },
      "locale": {
        "type": "string",
        "description": "The locale to use for formatting the value.",
        "defaultValue": "\"en-US\""
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "orientation": {
        "type": "\"horizontal\" | \"vertical\"",
        "description": "The orientation of the element.",
        "defaultValue": "\"horizontal\""
      }
    }
  },
  "qr-code": {
    "api": {
      "value": {
        "type": "string",
        "description": "The value to encode."
      },
      "setValue": {
        "type": "(value: string) => void",
        "description": "Set the value to encode."
      },
      "getDataUrl": {
        "type": "(type: DataUrlType, quality?: number) => Promise<string>",
        "description": "Returns the data URL of the qr code."
      }
    },
    "context": {
      "value": {
        "type": "string",
        "description": "The controlled value to encode."
      },
      "defaultValue": {
        "type": "string",
        "description": "The initial value to encode when rendered.\nUse when you don't need to control the value of the qr code."
      },
      "ids": {
        "type": "Partial<{ root: string; frame: string; }>",
        "description": "The element ids."
      },
      "encoding": {
        "type": "QrCodeGenerateOptions",
        "description": "The qr code encoding options."
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails) => void",
        "description": "Callback fired when the value changes."
      },
      "pixelSize": {
        "type": "number",
        "description": "The pixel size of the qr code."
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  },
  "radio-group": {
    "api": {
      "value": {
        "type": "string",
        "description": "The current value of the radio group"
      },
      "setValue": {
        "type": "(value: string) => void",
        "description": "Function to set the value of the radio group"
      },
      "clearValue": {
        "type": "() => void",
        "description": "Function to clear the value of the radio group"
      },
      "focus": {
        "type": "() => void",
        "description": "Function to focus the radio group"
      },
      "getItemState": {
        "type": "(props: ItemProps) => ItemState",
        "description": "Returns the state details of a radio input"
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ root: string; label: string; indicator: string; item(value: string): string; itemLabel(value: string): string; itemControl(value: string): string; itemHiddenInput(value: string): string; }>",
        "description": "The ids of the elements in the radio. Useful for composition."
      },
      "value": {
        "type": "string",
        "description": "The controlled value of the radio group"
      },
      "defaultValue": {
        "type": "string",
        "description": "The initial value of the checked radio when rendered.\nUse when you don't need to control the value of the radio group."
      },
      "name": {
        "type": "string",
        "description": "The name of the input fields in the radio\n(Useful for form submission)."
      },
      "form": {
        "type": "string",
        "description": "The associate form of the underlying input."
      },
      "disabled": {
        "type": "boolean",
        "description": "If `true`, the radio group will be disabled"
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the checkbox is read-only"
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails) => void",
        "description": "Function called once a radio is checked"
      },
      "orientation": {
        "type": "\"horizontal\" | \"vertical\"",
        "description": "Orientation of the radio group"
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  },
  "rating-group": {
    "api": {
      "setValue": {
        "type": "(value: number) => void",
        "description": "Sets the value of the rating group"
      },
      "clearValue": {
        "type": "() => void",
        "description": "Clears the value of the rating group"
      },
      "hovering": {
        "type": "boolean",
        "description": "Whether the rating group is being hovered"
      },
      "value": {
        "type": "number",
        "description": "The current value of the rating group"
      },
      "hoveredValue": {
        "type": "number",
        "description": "The value of the currently hovered rating"
      },
      "count": {
        "type": "number",
        "description": "The total number of ratings"
      },
      "items": {
        "type": "number[]",
        "description": "The array of rating values. Returns an array of numbers from 1 to the max value."
      },
      "getItemState": {
        "type": "(props: ItemProps) => ItemState",
        "description": "Returns the state of a rating item"
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ root: string; label: string; hiddenInput: string; control: string; item(id: string): string; }>",
        "description": "The ids of the elements in the rating. Useful for composition."
      },
      "translations": {
        "type": "IntlTranslations",
        "description": "Specifies the localized strings that identifies the accessibility elements and their states"
      },
      "count": {
        "type": "number",
        "description": "The total number of ratings.",
        "defaultValue": "5"
      },
      "name": {
        "type": "string",
        "description": "The name attribute of the rating element (used in forms)."
      },
      "form": {
        "type": "string",
        "description": "The associate form of the underlying input element."
      },
      "value": {
        "type": "number",
        "description": "The controlled value of the rating"
      },
      "defaultValue": {
        "type": "number",
        "description": "The initial value of the rating when rendered.\nUse when you don't need to control the value of the rating."
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the rating is readonly."
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the rating is disabled."
      },
      "required": {
        "type": "boolean",
        "description": "Whether the rating is required."
      },
      "allowHalf": {
        "type": "boolean",
        "description": "Whether to allow half stars."
      },
      "autoFocus": {
        "type": "boolean",
        "description": "Whether to autofocus the rating."
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails) => void",
        "description": "Function to be called when the rating value changes."
      },
      "onHoverChange": {
        "type": "(details: HoverChangeDetails) => void",
        "description": "Function to be called when the rating value is hovered."
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  },
  "select": {
    "api": {
      "focused": {
        "type": "boolean",
        "description": "Whether the select is focused"
      },
      "open": {
        "type": "boolean",
        "description": "Whether the select is open"
      },
      "empty": {
        "type": "boolean",
        "description": "Whether the select value is empty"
      },
      "highlightedValue": {
        "type": "string",
        "description": "The value of the highlighted item"
      },
      "highlightedItem": {
        "type": "V",
        "description": "The highlighted item"
      },
      "highlightValue": {
        "type": "(value: string) => void",
        "description": "Function to highlight a value"
      },
      "selectedItems": {
        "type": "V[]",
        "description": "The selected items"
      },
      "hasSelectedItems": {
        "type": "boolean",
        "description": "Whether there's a selected option"
      },
      "value": {
        "type": "string[]",
        "description": "The selected item keys"
      },
      "valueAsString": {
        "type": "string",
        "description": "The string representation of the selected items"
      },
      "selectValue": {
        "type": "(value: string) => void",
        "description": "Function to select a value"
      },
      "selectAll": {
        "type": "() => void",
        "description": "Function to select all values"
      },
      "setValue": {
        "type": "(value: string[]) => void",
        "description": "Function to set the value of the select"
      },
      "clearValue": {
        "type": "(value?: string) => void",
        "description": "Function to clear the value of the select.\nIf a value is provided, it will only clear that value, otherwise, it will clear all values."
      },
      "focus": {
        "type": "() => void",
        "description": "Function to focus on the select input"
      },
      "getItemState": {
        "type": "(props: ItemProps<any>) => ItemState",
        "description": "Returns the state of a select item"
      },
      "setOpen": {
        "type": "(open: boolean) => void",
        "description": "Function to open or close the select"
      },
      "collection": {
        "type": "ListCollection<V>",
        "description": "Function to toggle the select"
      },
      "reposition": {
        "type": "(options?: Partial<PositioningOptions>) => void",
        "description": "Function to set the positioning options of the select"
      },
      "multiple": {
        "type": "boolean",
        "description": "Whether the select allows multiple selections"
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the select is disabled"
      }
    },
    "context": {
      "collection": {
        "type": "ListCollection<T>",
        "description": "The item collection"
      },
      "ids": {
        "type": "Partial<{ root: string; content: string; control: string; trigger: string; clearTrigger: string; label: string; hiddenSelect: string; positioner: string; item(id: string | number): string; itemGroup(id: string | number): string; itemGroupLabel(id: string | number): string; }>",
        "description": "The ids of the elements in the select. Useful for composition."
      },
      "name": {
        "type": "string",
        "description": "The `name` attribute of the underlying select."
      },
      "form": {
        "type": "string",
        "description": "The associate form of the underlying select."
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the select is disabled"
      },
      "invalid": {
        "type": "boolean",
        "description": "Whether the select is invalid"
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the select is read-only"
      },
      "required": {
        "type": "boolean",
        "description": "Whether the select is required"
      },
      "closeOnSelect": {
        "type": "boolean",
        "description": "Whether the select should close after an item is selected",
        "defaultValue": "true"
      },
      "onHighlightChange": {
        "type": "(details: HighlightChangeDetails<T>) => void",
        "description": "The callback fired when the highlighted item changes."
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails<T>) => void",
        "description": "The callback fired when the selected item changes."
      },
      "onOpenChange": {
        "type": "(details: OpenChangeDetails) => void",
        "description": "Function called when the popup is opened"
      },
      "positioning": {
        "type": "PositioningOptions",
        "description": "The positioning options of the menu."
      },
      "value": {
        "type": "string[]",
        "description": "The controlled keys of the selected items"
      },
      "defaultValue": {
        "type": "string[]",
        "description": "The initial default value of the select when rendered.\nUse when you don't need to control the value of the select."
      },
      "highlightedValue": {
        "type": "string",
        "description": "The controlled key of the highlighted item"
      },
      "defaultHighlightedValue": {
        "type": "string",
        "description": "The initial value of the highlighted item when opened.\nUse when you don't need to control the highlighted value of the select."
      },
      "loopFocus": {
        "type": "boolean",
        "description": "Whether to loop the keyboard navigation through the options",
        "defaultValue": "false"
      },
      "multiple": {
        "type": "boolean",
        "description": "Whether to allow multiple selection"
      },
      "open": {
        "type": "boolean",
        "description": "Whether the select menu is open"
      },
      "defaultOpen": {
        "type": "boolean",
        "description": "Whether the select's open state is controlled by the user"
      },
      "scrollToIndexFn": {
        "type": "(details: ScrollToIndexDetails) => void",
        "description": "Function to scroll to a specific index"
      },
      "composite": {
        "type": "boolean",
        "description": "Whether the select is a composed with other composite widgets like tabs or combobox",
        "defaultValue": "true"
      },
      "deselectable": {
        "type": "boolean",
        "description": "Whether the value can be cleared by clicking the selected item.\n\n**Note:** this is only applicable for single selection"
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "onPointerDownOutside": {
        "type": "(event: PointerDownOutsideEvent) => void",
        "description": "Function called when the pointer is pressed down outside the component"
      },
      "onFocusOutside": {
        "type": "(event: FocusOutsideEvent) => void",
        "description": "Function called when the focus is moved outside the component"
      },
      "onInteractOutside": {
        "type": "(event: InteractOutsideEvent) => void",
        "description": "Function called when an interaction happens outside the component"
      }
    }
  },
  "signature-pad": {
    "api": {
      "empty": {
        "type": "boolean",
        "description": "Whether the signature pad is empty."
      },
      "drawing": {
        "type": "boolean",
        "description": "Whether the user is currently drawing."
      },
      "currentPath": {
        "type": "string",
        "description": "The current path being drawn."
      },
      "paths": {
        "type": "string[]",
        "description": "The paths of the signature pad."
      },
      "getDataUrl": {
        "type": "(type: DataUrlType, quality?: number) => Promise<string>",
        "description": "Returns the data URL of the signature pad."
      },
      "clear": {
        "type": "() => void",
        "description": "Clears the signature pad."
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ root: string; control: string; hiddenInput: string; label: string; }>",
        "description": "The ids of the signature pad elements. Useful for composition."
      },
      "translations": {
        "type": "IntlTranslations",
        "description": "The translations of the signature pad. Useful for internationalization."
      },
      "onDraw": {
        "type": "(details: DrawDetails) => void",
        "description": "Callback when the signature pad is drawing."
      },
      "onDrawEnd": {
        "type": "(details: DrawEndDetails) => void",
        "description": "Callback when the signature pad is done drawing."
      },
      "drawing": {
        "type": "DrawingOptions",
        "description": "The drawing options.",
        "defaultValue": "'{ size: 2, simulatePressure: true }'"
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the signature pad is disabled."
      },
      "required": {
        "type": "boolean",
        "description": "Whether the signature pad is required."
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the signature pad is read-only."
      },
      "name": {
        "type": "string",
        "description": "The name of the signature pad. Useful for form submission."
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  },
  "slider": {
    "api": {
      "value": {
        "type": "number[]",
        "description": "The value of the slider."
      },
      "dragging": {
        "type": "boolean",
        "description": "Whether the slider is being dragged."
      },
      "focused": {
        "type": "boolean",
        "description": "Whether the slider is focused."
      },
      "setValue": {
        "type": "(value: number[]) => void",
        "description": "Function to set the value of the slider."
      },
      "getThumbValue": {
        "type": "(index: number) => number",
        "description": "Returns the value of the thumb at the given index."
      },
      "setThumbValue": {
        "type": "(index: number, value: number) => void",
        "description": "Sets the value of the thumb at the given index."
      },
      "getValuePercent": {
        "type": "(value: number) => number",
        "description": "Returns the percent of the thumb at the given index."
      },
      "getPercentValue": {
        "type": "(percent: number) => number",
        "description": "Returns the value of the thumb at the given percent."
      },
      "getThumbPercent": {
        "type": "(index: number) => number",
        "description": "Returns the percent of the thumb at the given index."
      },
      "setThumbPercent": {
        "type": "(index: number, percent: number) => void",
        "description": "Sets the percent of the thumb at the given index."
      },
      "getThumbMin": {
        "type": "(index: number) => number",
        "description": "Returns the min value of the thumb at the given index."
      },
      "getThumbMax": {
        "type": "(index: number) => number",
        "description": "Returns the max value of the thumb at the given index."
      },
      "increment": {
        "type": "(index: number) => void",
        "description": "Function to increment the value of the slider at the given index."
      },
      "decrement": {
        "type": "(index: number) => void",
        "description": "Function to decrement the value of the slider at the given index."
      },
      "focus": {
        "type": "() => void",
        "description": "Function to focus the slider. This focuses the first thumb."
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ root: string; thumb(index: number): string; hiddenInput(index: number): string; control: string; track: string; range: string; label: string; valueText: string; marker(index: number): string; }>",
        "description": "The ids of the elements in the slider. Useful for composition."
      },
      "aria-label": {
        "type": "string[]",
        "description": "The aria-label of each slider thumb. Useful for providing an accessible name to the slider"
      },
      "aria-labelledby": {
        "type": "string[]",
        "description": "The `id` of the elements that labels each slider thumb. Useful for providing an accessible name to the slider"
      },
      "name": {
        "type": "string",
        "description": "The name associated with each slider thumb (when used in a form)"
      },
      "form": {
        "type": "string",
        "description": "The associate form of the underlying input element."
      },
      "value": {
        "type": "number[]",
        "description": "The controlled value of the slider"
      },
      "defaultValue": {
        "type": "number[]",
        "description": "The initial value of the slider when rendered.\nUse when you don't need to control the value of the slider."
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the slider is disabled"
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the slider is read-only"
      },
      "invalid": {
        "type": "boolean",
        "description": "Whether the slider is invalid"
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails) => void",
        "description": "Function invoked when the value of the slider changes"
      },
      "onValueChangeEnd": {
        "type": "(details: ValueChangeDetails) => void",
        "description": "Function invoked when the slider value change is done"
      },
      "onFocusChange": {
        "type": "(details: FocusChangeDetails) => void",
        "description": "Function invoked when the slider's focused index changes"
      },
      "getAriaValueText": {
        "type": "(details: ValueTextDetails) => string",
        "description": "Function that returns a human readable value for the slider thumb"
      },
      "min": {
        "type": "number",
        "description": "The minimum value of the slider",
        "defaultValue": "0"
      },
      "max": {
        "type": "number",
        "description": "The maximum value of the slider",
        "defaultValue": "100"
      },
      "step": {
        "type": "number",
        "description": "The step value of the slider",
        "defaultValue": "1"
      },
      "minStepsBetweenThumbs": {
        "type": "number",
        "description": "The minimum permitted steps between multiple thumbs.",
        "defaultValue": "0"
      },
      "orientation": {
        "type": "\"vertical\" | \"horizontal\"",
        "description": "The orientation of the slider",
        "defaultValue": "\"horizontal\""
      },
      "origin": {
        "type": "\"start\" | \"center\" | \"end\"",
        "description": "The origin of the slider range. The track is filled from the origin\nto the thumb for single values.\n- \"start\": Useful when the value represents an absolute value\n- \"center\": Useful when the value represents an offset (relative)\n- \"end\": Useful when the value represents an offset from the end",
        "defaultValue": "\"start\""
      },
      "thumbAlignment": {
        "type": "\"center\" | \"contain\"",
        "description": "The alignment of the slider thumb relative to the track\n- `center`: the thumb will extend beyond the bounds of the slider track.\n- `contain`: the thumb will be contained within the bounds of the track.",
        "defaultValue": "\"contain\""
      },
      "thumbSize": {
        "type": "{ width: number; height: number; }",
        "description": "The slider thumbs dimensions"
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  },
  "splitter": {
    "api": {
      "dragging": {
        "type": "boolean",
        "description": "Whether the splitter is currently being resized."
      },
      "getSizes": {
        "type": "() => number[]",
        "description": "The current sizes of the panels."
      },
      "setSizes": {
        "type": "(size: number[]) => void",
        "description": "Set the sizes of the panels."
      },
      "getItems": {
        "type": "() => SplitterItem[]",
        "description": "Get the items of the splitter."
      },
      "getPanelSize": {
        "type": "(id: string) => number",
        "description": "Get the size of a panel."
      },
      "isPanelCollapsed": {
        "type": "(id: string) => boolean",
        "description": "Whether a panel is collapsed."
      },
      "isPanelExpanded": {
        "type": "(id: string) => boolean",
        "description": "Whether a panel is expanded."
      },
      "collapsePanel": {
        "type": "(id: string) => void",
        "description": "Collapse a panel."
      },
      "expandPanel": {
        "type": "(id: string, minSize?: number) => void",
        "description": "Expand a panel."
      },
      "resizePanel": {
        "type": "(id: string, unsafePanelSize: number) => void",
        "description": "Resize a panel."
      },
      "getLayout": {
        "type": "() => string",
        "description": "Get the layout of the splitter."
      }
    },
    "context": {
      "orientation": {
        "type": "\"horizontal\" | \"vertical\"",
        "description": "The orientation of the splitter. Can be `horizontal` or `vertical`",
        "defaultValue": "\"horizontal\""
      },
      "size": {
        "type": "number[]",
        "description": "The controlled size data of the panels"
      },
      "defaultSize": {
        "type": "number[]",
        "description": "The initial size of the panels when rendered.\nUse when you don't need to control the size of the panels."
      },
      "panels": {
        "type": "PanelData[]",
        "description": "The size constraints of the panels."
      },
      "onResize": {
        "type": "(details: ResizeDetails) => void",
        "description": "Function called when the splitter is resized."
      },
      "onResizeStart": {
        "type": "() => void",
        "description": "Function called when the splitter resize starts."
      },
      "onResizeEnd": {
        "type": "(details: ResizeEndDetails) => void",
        "description": "Function called when the splitter resize ends."
      },
      "ids": {
        "type": "Partial<{ root: string; resizeTrigger(id: string): string; label(id: string): string; panel(id: string | number): string; }>",
        "description": "The ids of the elements in the splitter. Useful for composition."
      },
      "keyboardResizeBy": {
        "type": "number",
        "description": "The number of pixels to resize the panel by when the keyboard is used."
      },
      "nonce": {
        "type": "string",
        "description": "The nonce for the injected splitter cursor stylesheet."
      },
      "onCollapse": {
        "type": "(details: ExpandCollapseDetails) => void",
        "description": "Function called when a panel is collapsed."
      },
      "onExpand": {
        "type": "(details: ExpandCollapseDetails) => void",
        "description": "Function called when a panel is expanded."
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  },
  "steps": {
    "api": {
      "value": {
        "type": "number",
        "description": "The value of the stepper."
      },
      "percent": {
        "type": "number",
        "description": "The percentage of the stepper."
      },
      "count": {
        "type": "number",
        "description": "The total number of steps."
      },
      "hasNextStep": {
        "type": "boolean",
        "description": "Whether the stepper has a next step."
      },
      "hasPrevStep": {
        "type": "boolean",
        "description": "Whether the stepper has a previous step."
      },
      "isCompleted": {
        "type": "boolean",
        "description": "Whether the stepper is completed."
      },
      "setStep": {
        "type": "(step: number) => void",
        "description": "Function to set the value of the stepper."
      },
      "goToNextStep": {
        "type": "() => void",
        "description": "Function to go to the next step."
      },
      "goToPrevStep": {
        "type": "() => void",
        "description": "Function to go to the previous step."
      },
      "resetStep": {
        "type": "() => void",
        "description": "Function to go to reset the stepper."
      },
      "getItemState": {
        "type": "(props: ItemProps) => ItemState",
        "description": "Returns the state of the item at the given index."
      }
    },
    "context": {
      "ids": {
        "type": "ElementIds",
        "description": "The custom ids for the stepper elements"
      },
      "step": {
        "type": "number",
        "description": "The controlled value of the stepper"
      },
      "defaultStep": {
        "type": "number",
        "description": "The initial value of the stepper when rendered.\nUse when you don't need to control the value of the stepper."
      },
      "onStepChange": {
        "type": "(details: StepChangeDetails) => void",
        "description": "Callback to be called when the value changes"
      },
      "onStepComplete": {
        "type": "VoidFunction",
        "description": "Callback to be called when a step is completed"
      },
      "linear": {
        "type": "boolean",
        "description": "If `true`, the stepper requires the user to complete the steps in order"
      },
      "orientation": {
        "type": "\"horizontal\" | \"vertical\"",
        "description": "The orientation of the stepper",
        "defaultValue": "\"horizontal\""
      },
      "count": {
        "type": "number",
        "description": "The total number of steps"
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  },
  "switch": {
    "api": {
      "checked": {
        "type": "boolean",
        "description": "Whether the checkbox is checked"
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the checkbox is disabled"
      },
      "focused": {
        "type": "boolean",
        "description": "Whether the checkbox is focused"
      },
      "setChecked": {
        "type": "(checked: boolean) => void",
        "description": "Function to set the checked state of the switch."
      },
      "toggleChecked": {
        "type": "() => void",
        "description": "Function to toggle the checked state of the checkbox"
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ root: string; hiddenInput: string; control: string; label: string; thumb: string; }>",
        "description": "The ids of the elements in the switch. Useful for composition."
      },
      "label": {
        "type": "string",
        "description": "Specifies the localized strings that identifies the accessibility elements and their states"
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the switch is disabled."
      },
      "invalid": {
        "type": "boolean",
        "description": "If `true`, the switch is marked as invalid."
      },
      "required": {
        "type": "boolean",
        "description": "If `true`, the switch input is marked as required,"
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the switch is read-only"
      },
      "onCheckedChange": {
        "type": "(details: CheckedChangeDetails) => void",
        "description": "Function to call when the switch is clicked."
      },
      "checked": {
        "type": "boolean",
        "description": "The controlled checked state of the switch"
      },
      "defaultChecked": {
        "type": "boolean",
        "description": "The initial checked state of the switch when rendered.\nUse when you don't need to control the checked state of the switch."
      },
      "name": {
        "type": "string",
        "description": "The name of the input field in a switch\n(Useful for form submission)."
      },
      "form": {
        "type": "string",
        "description": "The id of the form that the switch belongs to"
      },
      "value": {
        "type": "string | number",
        "description": "The value of switch input. Useful for form submission.",
        "defaultValue": "\"on\""
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  },
  "tabs": {
    "api": {
      "value": {
        "type": "string",
        "description": "The current value of the tabs."
      },
      "focusedValue": {
        "type": "string",
        "description": "The value of the tab that is currently focused."
      },
      "setValue": {
        "type": "(value: string) => void",
        "description": "Sets the value of the tabs."
      },
      "clearValue": {
        "type": "() => void",
        "description": "Clears the value of the tabs."
      },
      "setIndicatorRect": {
        "type": "(value: string) => void",
        "description": "Sets the indicator rect to the tab with the given value"
      },
      "syncTabIndex": {
        "type": "() => void",
        "description": "Synchronizes the tab index of the content element.\nUseful when rendering tabs within a select or combobox"
      },
      "focus": {
        "type": "() => void",
        "description": "Set focus on the selected tab trigger"
      },
      "selectNext": {
        "type": "(fromValue?: string) => void",
        "description": "Selects the next tab"
      },
      "selectPrev": {
        "type": "(fromValue?: string) => void",
        "description": "Selects the previous tab"
      },
      "getTriggerState": {
        "type": "(props: TriggerProps) => TriggerState",
        "description": "Returns the state of the trigger with the given props"
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ root: string; trigger: string; list: string; content: string; indicator: string; }>",
        "description": "The ids of the elements in the tabs. Useful for composition."
      },
      "translations": {
        "type": "IntlTranslations",
        "description": "Specifies the localized strings that identifies the accessibility elements and their states"
      },
      "loopFocus": {
        "type": "boolean",
        "description": "Whether the keyboard navigation will loop from last tab to first, and vice versa.",
        "defaultValue": "true"
      },
      "value": {
        "type": "string",
        "description": "The controlled selected tab value"
      },
      "defaultValue": {
        "type": "string",
        "description": "The initial selected tab value when rendered.\nUse when you don't need to control the selected tab value."
      },
      "orientation": {
        "type": "\"horizontal\" | \"vertical\"",
        "description": "The orientation of the tabs. Can be `horizontal` or `vertical`\n- `horizontal`: only left and right arrow key navigation will work.\n- `vertical`: only up and down arrow key navigation will work.",
        "defaultValue": "\"horizontal\""
      },
      "activationMode": {
        "type": "\"manual\" | \"automatic\"",
        "description": "The activation mode of the tabs. Can be `manual` or `automatic`\n- `manual`: Tabs are activated when clicked or press `enter` key.\n- `automatic`: Tabs are activated when receiving focus",
        "defaultValue": "\"automatic\""
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails) => void",
        "description": "Callback to be called when the selected/active tab changes"
      },
      "onFocusChange": {
        "type": "(details: FocusChangeDetails) => void",
        "description": "Callback to be called when the focused tab changes"
      },
      "composite": {
        "type": "boolean",
        "description": "Whether the tab is composite"
      },
      "deselectable": {
        "type": "boolean",
        "description": "Whether the active tab can be deselected when clicking on it."
      },
      "navigate": {
        "type": "(details: NavigateDetails) => void",
        "description": "Function to navigate to the selected tab when clicking on it.\nUseful if tab triggers are anchor elements."
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  },
  "tags-input": {
    "api": {
      "empty": {
        "type": "boolean",
        "description": "Whether the tags are empty"
      },
      "inputValue": {
        "type": "string",
        "description": "The value of the tags entry input."
      },
      "value": {
        "type": "string[]",
        "description": "The value of the tags as an array of strings."
      },
      "valueAsString": {
        "type": "string",
        "description": "The value of the tags as a string."
      },
      "count": {
        "type": "number",
        "description": "The number of the tags."
      },
      "atMax": {
        "type": "boolean",
        "description": "Whether the tags have reached the max limit."
      },
      "setValue": {
        "type": "(value: string[]) => void",
        "description": "Function to set the value of the tags."
      },
      "clearValue": {
        "type": "(id?: string) => void",
        "description": "Function to clear the value of the tags."
      },
      "addValue": {
        "type": "(value: string) => void",
        "description": "Function to add a tag to the tags."
      },
      "setValueAtIndex": {
        "type": "(index: number, value: string) => void",
        "description": "Function to set the value of a tag at the given index."
      },
      "setInputValue": {
        "type": "(value: string) => void",
        "description": "Function to set the value of the tags entry input."
      },
      "clearInputValue": {
        "type": "() => void",
        "description": "Function to clear the value of the tags entry input."
      },
      "focus": {
        "type": "() => void",
        "description": "Function to focus the tags entry input."
      },
      "getItemState": {
        "type": "(props: ItemProps) => ItemState",
        "description": "Returns the state of a tag"
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ root: string; input: string; hiddenInput: string; clearBtn: string; label: string; control: string; item(opts: ItemProps): string; }>",
        "description": "The ids of the elements in the tags input. Useful for composition."
      },
      "translations": {
        "type": "IntlTranslations",
        "description": "Specifies the localized strings that identifies the accessibility elements and their states"
      },
      "maxLength": {
        "type": "number",
        "description": "The max length of the input."
      },
      "delimiter": {
        "type": "string | RegExp",
        "description": "The character that serves has:\n- event key to trigger the addition of a new tag\n- character used to split tags when pasting into the input",
        "defaultValue": "\",\""
      },
      "autoFocus": {
        "type": "boolean",
        "description": "Whether the input should be auto-focused"
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the tags input should be disabled"
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the tags input should be read-only"
      },
      "invalid": {
        "type": "boolean",
        "description": "Whether the tags input is invalid"
      },
      "required": {
        "type": "boolean",
        "description": "Whether the tags input is required"
      },
      "editable": {
        "type": "boolean",
        "description": "Whether a tag can be edited after creation, by pressing `Enter` or double clicking.",
        "defaultValue": "true"
      },
      "inputValue": {
        "type": "string",
        "description": "The controlled tag input's value"
      },
      "defaultInputValue": {
        "type": "string",
        "description": "The initial tag input value when rendered.\nUse when you don't need to control the tag input value."
      },
      "value": {
        "type": "string[]",
        "description": "The controlled tag value"
      },
      "defaultValue": {
        "type": "string[]",
        "description": "The initial tag value when rendered.\nUse when you don't need to control the tag value."
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails) => void",
        "description": "Callback fired when the tag values is updated"
      },
      "onInputValueChange": {
        "type": "(details: InputValueChangeDetails) => void",
        "description": "Callback fired when the input value is updated"
      },
      "onHighlightChange": {
        "type": "(details: HighlightChangeDetails) => void",
        "description": "Callback fired when a tag is highlighted by pointer or keyboard navigation"
      },
      "onValueInvalid": {
        "type": "(details: ValidityChangeDetails) => void",
        "description": "Callback fired when the max tag count is reached or the `validateTag` function returns `false`"
      },
      "validate": {
        "type": "(details: ValidateArgs) => boolean",
        "description": "Returns a boolean that determines whether a tag can be added.\nUseful for preventing duplicates or invalid tag values."
      },
      "blurBehavior": {
        "type": "\"clear\" | \"add\"",
        "description": "The behavior of the tags input when the input is blurred\n- `\"add\"`: add the input value as a new tag\n- `\"clear\"`: clear the input value"
      },
      "addOnPaste": {
        "type": "boolean",
        "description": "Whether to add a tag when you paste values into the tag input",
        "defaultValue": "false"
      },
      "max": {
        "type": "number",
        "description": "The max number of tags",
        "defaultValue": "Infinity"
      },
      "allowOverflow": {
        "type": "boolean",
        "description": "Whether to allow tags to exceed max. In this case,\nwe'll attach `data-invalid` to the root"
      },
      "name": {
        "type": "string",
        "description": "The name attribute for the input. Useful for form submissions"
      },
      "form": {
        "type": "string",
        "description": "The associate form of the underlying input element."
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "onPointerDownOutside": {
        "type": "(event: PointerDownOutsideEvent) => void",
        "description": "Function called when the pointer is pressed down outside the component"
      },
      "onFocusOutside": {
        "type": "(event: FocusOutsideEvent) => void",
        "description": "Function called when the focus is moved outside the component"
      },
      "onInteractOutside": {
        "type": "(event: InteractOutsideEvent) => void",
        "description": "Function called when an interaction happens outside the component"
      }
    }
  },
  "time-picker": {
    "api": {
      "focused": {
        "type": "boolean",
        "description": "Whether the input is focused"
      },
      "open": {
        "type": "boolean",
        "description": "Whether the time picker is open"
      },
      "value": {
        "type": "Time",
        "description": "The selected time"
      },
      "valueAsString": {
        "type": "string",
        "description": "The selected time as a string"
      },
      "hour12": {
        "type": "boolean",
        "description": "Whether the time picker is in 12-hour format (based on the locale prop)"
      },
      "reposition": {
        "type": "(options?: PositioningOptions) => void",
        "description": "Function to reposition the time picker content"
      },
      "setOpen": {
        "type": "(nextOpen: boolean) => void",
        "description": "Function to open the time picker"
      },
      "clearValue": {
        "type": "() => void",
        "description": "Function to clear the selected time"
      },
      "setValue": {
        "type": "(value: string | Time) => void",
        "description": "Function to set the selected time"
      },
      "setUnitValue": {
        "type": "{ (unit: \"period\", value: TimeUnit, value: number): void; }",
        "description": "Function to set the focused time unit"
      },
      "getHours": {
        "type": "() => Cell[]",
        "description": "Get the available hours that will be displayed in the time picker"
      },
      "getMinutes": {
        "type": "() => Cell[]",
        "description": "Get the available minutes that will be displayed in the time picker"
      },
      "getSeconds": {
        "type": "() => Cell[]",
        "description": "Get the available seconds that will be displayed in the time picker"
      }
    },
    "context": {
      "locale": {
        "type": "string",
        "description": "The locale (BCP 47 language tag) to use when formatting the time."
      },
      "value": {
        "type": "Time",
        "description": "The controlled selected time."
      },
      "defaultValue": {
        "type": "Time",
        "description": "The initial selected time when rendered.\nUse when you don't need to control the selected time."
      },
      "open": {
        "type": "boolean",
        "description": "Whether the timepicker is open"
      },
      "defaultOpen": {
        "type": "boolean",
        "description": "Whether the timepicker open state is controlled by the user"
      },
      "ids": {
        "type": "Partial<{ trigger: string; input: string; positioner: string; content: string; clearTrigger: string; control: string; column(unit: TimeUnit): string; }>",
        "description": "The ids of the elements in the date picker. Useful for composition."
      },
      "name": {
        "type": "string",
        "description": "The `name` attribute of the input element."
      },
      "positioning": {
        "type": "PositioningOptions",
        "description": "The user provided options used to position the time picker content"
      },
      "placeholder": {
        "type": "string",
        "description": "The placeholder text of the input."
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the time picker is disabled."
      },
      "readOnly": {
        "type": "boolean",
        "description": "Whether the time picker is read-only."
      },
      "min": {
        "type": "Time",
        "description": "The minimum time that can be selected."
      },
      "max": {
        "type": "Time",
        "description": "The maximum time that can be selected."
      },
      "steps": {
        "type": "{ hour?: number; minute?: number; second?: number; }",
        "description": "The steps of each time unit."
      },
      "allowSeconds": {
        "type": "boolean",
        "description": "Whether to show the seconds."
      },
      "onValueChange": {
        "type": "(value: ValueChangeDetails) => void",
        "description": "Function called when the value changes."
      },
      "onOpenChange": {
        "type": "(details: OpenChangeDetails) => void",
        "description": "Function called when the time picker opens or closes."
      },
      "onFocusChange": {
        "type": "(details: FocusChangeDetails) => void",
        "description": "Function called when the focused date changes."
      },
      "disableLayer": {
        "type": "boolean",
        "description": "Whether to disable the interaction outside logic"
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  },
  "timer": {
    "api": {
      "running": {
        "type": "boolean",
        "description": "Whether the timer is running."
      },
      "paused": {
        "type": "boolean",
        "description": "Whether the timer is paused."
      },
      "time": {
        "type": "Time<number>",
        "description": "The formatted timer count value."
      },
      "formattedTime": {
        "type": "Time<string>",
        "description": "The formatted time parts of the timer count."
      },
      "start": {
        "type": "() => void",
        "description": "Function to start the timer."
      },
      "pause": {
        "type": "() => void",
        "description": "Function to pause the timer."
      },
      "resume": {
        "type": "() => void",
        "description": "Function to resume the timer."
      },
      "reset": {
        "type": "() => void",
        "description": "Function to reset the timer."
      },
      "restart": {
        "type": "() => void",
        "description": "Function to restart the timer."
      },
      "progressPercent": {
        "type": "number",
        "description": "The progress percentage of the timer."
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ root: string; area: string; }>",
        "description": "The ids of the timer parts"
      },
      "countdown": {
        "type": "boolean",
        "description": "Whether the timer should countdown, decrementing the timer on each tick."
      },
      "startMs": {
        "type": "number",
        "description": "The total duration of the timer in milliseconds."
      },
      "targetMs": {
        "type": "number",
        "description": "The minimum count of the timer in milliseconds."
      },
      "autoStart": {
        "type": "boolean",
        "description": "Whether the timer should start automatically"
      },
      "interval": {
        "type": "number",
        "description": "The interval in milliseconds to update the timer count.",
        "defaultValue": "1000"
      },
      "onTick": {
        "type": "(details: TickDetails) => void",
        "description": "Function invoked when the timer ticks"
      },
      "onComplete": {
        "type": "() => void",
        "description": "Function invoked when the timer is completed"
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  },
  "toast": {
    "api": {
      "getCount": {
        "type": "() => number",
        "description": "The total number of toasts"
      },
      "getToasts": {
        "type": "() => ToastProps<any>[]",
        "description": "The toasts"
      },
      "subscribe": {
        "type": "(callback: (toasts: Options<O>[]) => void) => VoidFunction",
        "description": "Subscribe to the toast group"
      }
    },
    "context": {
      "attrs": {
        "type": "ToastStoreProps>",
        "description": "The attributes of the toast store"
      },
      "subscribe": {
        "type": "(subscriber: (...args: any[]) => void) => VoidFunction",
        "description": "Subscribe to the toast store"
      },
      "create": {
        "type": "(data: Options<V>) => string",
        "description": "Create a new toast with the given options"
      },
      "update": {
        "type": "(id: string, data: Partial<ToastProps<V>>) => string",
        "description": "Update an existing toast with new properties"
      },
      "remove": {
        "type": "(id: string) => void",
        "description": "Remove a toast by its ID"
      },
      "dismiss": {
        "type": "(id?: string) => void",
        "description": "Dismiss a toast by its ID. If no ID is provided, dismisses all toasts"
      },
      "error": {
        "type": "(data: Options<V>) => void",
        "description": "Create an error toast with the given options"
      },
      "success": {
        "type": "(data: Options<V>) => void",
        "description": "Create a success toast with the given options"
      },
      "info": {
        "type": "(data: Options<V>) => void",
        "description": "Create an info toast with the given options"
      },
      "warning": {
        "type": "(data: Options<V>) => void",
        "description": "Create a warning toast with the given options"
      },
      "loading": {
        "type": "(data: Options<V>) => void",
        "description": "Create a loading toast with the given options"
      },
      "getVisibleToasts": {
        "type": "() => Partial<ToastProps<V>>[]",
        "description": "Get all currently visible toasts"
      },
      "getCount": {
        "type": "() => number",
        "description": "Get the total number of toasts"
      },
      "promise": {
        "type": "<T>(promise: Promise<T> | (() => Promise<T>), options: Options<V>, \"type\">) => { id: string; unwrap: () => Promise<T>; }",
        "description": "Create a toast that tracks a promise's state"
      },
      "pause": {
        "type": "(id?: string) => void",
        "description": "Pause a toast's auto-dismiss timer. If no ID is provided, pauses all toasts"
      },
      "resume": {
        "type": "(id?: string) => void",
        "description": "Resume a toast's auto-dismiss timer. If no ID is provided, resumes all toasts"
      },
      "isVisible": {
        "type": "(id: string) => boolean",
        "description": "Check if a toast with the given ID is currently visible"
      },
      "isDismissed": {
        "type": "(id: string) => boolean",
        "description": "Check if a toast with the given ID has been dismissed"
      }
    }
  },
  "toggle": {
    "api": {
      "pressed": {
        "type": "boolean",
        "description": "Whether the toggle is pressed."
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the toggle is disabled."
      },
      "setPressed": {
        "type": "(pressed: boolean) => void",
        "description": "Sets the pressed state of the toggle."
      }
    },
    "context": {
      "disabled": {
        "type": "boolean",
        "description": "Whether the toggle is disabled."
      },
      "defaultPressed": {
        "type": "boolean",
        "description": "The default pressed state of the toggle."
      },
      "pressed": {
        "type": "boolean",
        "description": "The pressed state of the toggle."
      },
      "onPressedChange": {
        "type": "(pressed: boolean) => void",
        "description": "Event handler called when the pressed state of the toggle changes."
      }
    }
  },
  "toggle-group": {
    "api": {
      "value": {
        "type": "string[]",
        "description": "The value of the toggle group."
      },
      "setValue": {
        "type": "(values: string[]) => void",
        "description": "Function to set the value of the toggle group."
      },
      "getItemState": {
        "type": "(props: ItemProps) => ItemState",
        "description": "Returns the state of the toggle item."
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ root: string; item(value: string): string; }>",
        "description": "The ids of the elements in the toggle. Useful for composition."
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the toggle is disabled."
      },
      "value": {
        "type": "string[]",
        "description": "The controlled selected value of the toggle group."
      },
      "defaultValue": {
        "type": "string[]",
        "description": "The initial selected value of the toggle group when rendered.\nUse when you don't need to control the selected value of the toggle group."
      },
      "onValueChange": {
        "type": "(details: ValueChangeDetails) => void",
        "description": "Function to call when the toggle is clicked."
      },
      "loopFocus": {
        "type": "boolean",
        "description": "Whether to loop focus inside the toggle group.",
        "defaultValue": "true"
      },
      "rovingFocus": {
        "type": "boolean",
        "description": "Whether to use roving tab index to manage focus.",
        "defaultValue": "true"
      },
      "orientation": {
        "type": "Orientation",
        "description": "The orientation of the toggle group.",
        "defaultValue": "\"horizontal\""
      },
      "multiple": {
        "type": "boolean",
        "description": "Whether to allow multiple toggles to be selected."
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  },
  "tooltip": {
    "api": {
      "open": {
        "type": "boolean",
        "description": "Whether the tooltip is open."
      },
      "setOpen": {
        "type": "(open: boolean) => void",
        "description": "Function to open the tooltip."
      },
      "reposition": {
        "type": "(options?: Partial<PositioningOptions>) => void",
        "description": "Function to reposition the popover"
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ trigger: string; content: string; arrow: string; positioner: string; }>",
        "description": "The ids of the elements in the tooltip. Useful for composition."
      },
      "openDelay": {
        "type": "number",
        "description": "The open delay of the tooltip.",
        "defaultValue": "1000"
      },
      "closeDelay": {
        "type": "number",
        "description": "The close delay of the tooltip.",
        "defaultValue": "500"
      },
      "closeOnPointerDown": {
        "type": "boolean",
        "description": "Whether to close the tooltip on pointerdown.",
        "defaultValue": "true"
      },
      "closeOnEscape": {
        "type": "boolean",
        "description": "Whether to close the tooltip when the Escape key is pressed.",
        "defaultValue": "true"
      },
      "closeOnScroll": {
        "type": "boolean",
        "description": "Whether the tooltip should close on scroll",
        "defaultValue": "true"
      },
      "closeOnClick": {
        "type": "boolean",
        "description": "Whether the tooltip should close on click",
        "defaultValue": "true"
      },
      "interactive": {
        "type": "boolean",
        "description": "Whether the tooltip's content is interactive.\nIn this mode, the tooltip will remain open when user hovers over the content.",
        "defaultValue": "false"
      },
      "onOpenChange": {
        "type": "(details: OpenChangeDetails) => void",
        "description": "Function called when the tooltip is opened."
      },
      "aria-label": {
        "type": "string",
        "description": "Custom label for the tooltip."
      },
      "positioning": {
        "type": "PositioningOptions",
        "description": "The user provided options used to position the popover content"
      },
      "disabled": {
        "type": "boolean",
        "description": "Whether the tooltip is disabled"
      },
      "open": {
        "type": "boolean",
        "description": "The controlled open state of the tooltip"
      },
      "defaultOpen": {
        "type": "boolean",
        "description": "The initial open state of the tooltip when rendered.\nUse when you don't need to control the open state of the tooltip."
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  },
  "tour": {
    "api": {
      "open": {
        "type": "boolean",
        "description": "Whether the tour is open"
      },
      "totalSteps": {
        "type": "number",
        "description": "The total number of steps"
      },
      "stepIndex": {
        "type": "number",
        "description": "The index of the current step"
      },
      "step": {
        "type": "StepDetails",
        "description": "The current step details"
      },
      "hasNextStep": {
        "type": "boolean",
        "description": "Whether there is a next step"
      },
      "hasPrevStep": {
        "type": "boolean",
        "description": "Whether there is a previous step"
      },
      "firstStep": {
        "type": "boolean",
        "description": "Whether the current step is the first step"
      },
      "lastStep": {
        "type": "boolean",
        "description": "Whether the current step is the last step"
      },
      "addStep": {
        "type": "(step: StepDetails) => void",
        "description": "Add a new step to the tour"
      },
      "removeStep": {
        "type": "(id: string) => void",
        "description": "Remove a step from the tour"
      },
      "updateStep": {
        "type": "(id: string, stepOverrides: Partial<StepDetails>) => void",
        "description": "Update a step in the tour with partial details"
      },
      "setSteps": {
        "type": "(steps: StepDetails[]) => void",
        "description": "Set the steps of the tour"
      },
      "setStep": {
        "type": "(id: string) => void",
        "description": "Set the current step of the tour"
      },
      "start": {
        "type": "(id?: string) => void",
        "description": "Start the tour at a specific step (or the first step if not provided)"
      },
      "isValidStep": {
        "type": "(id: string) => boolean",
        "description": "Check if a step is valid"
      },
      "isCurrentStep": {
        "type": "(id: string) => boolean",
        "description": "Check if a step is visible"
      },
      "next": {
        "type": "() => void",
        "description": "Move to the next step"
      },
      "prev": {
        "type": "() => void",
        "description": "Move to the previous step"
      },
      "getProgressText": {
        "type": "() => string",
        "description": "Returns the progress text"
      },
      "getProgressPercent": {
        "type": "() => number",
        "description": "Returns the progress percent"
      }
    },
    "context": {
      "ids": {
        "type": "Partial<{ content: string; title: string; description: string; positioner: string; backdrop: string; arrow: string; }>",
        "description": "The ids of the elements in the tour. Useful for composition."
      },
      "steps": {
        "type": "StepDetails[]",
        "description": "The steps of the tour"
      },
      "stepId": {
        "type": "string",
        "description": "The id of the currently highlighted step"
      },
      "onStepChange": {
        "type": "(details: StepChangeDetails) => void",
        "description": "Callback when the highlighted step changes"
      },
      "onStepsChange": {
        "type": "(details: StepsChangeDetails) => void",
        "description": "Callback when the steps change"
      },
      "onStatusChange": {
        "type": "(details: StatusChangeDetails) => void",
        "description": "Callback when the tour is opened or closed"
      },
      "closeOnInteractOutside": {
        "type": "boolean",
        "description": "Whether to close the tour when the user clicks outside the tour",
        "defaultValue": "true"
      },
      "closeOnEscape": {
        "type": "boolean",
        "description": "Whether to close the tour when the user presses the escape key",
        "defaultValue": "true"
      },
      "keyboardNavigation": {
        "type": "boolean",
        "description": "Whether to allow keyboard navigation (right/left arrow keys to navigate between steps)",
        "defaultValue": "true"
      },
      "preventInteraction": {
        "type": "boolean",
        "description": "Prevents interaction with the rest of the page while the tour is open",
        "defaultValue": "false"
      },
      "spotlightOffset": {
        "type": "Point",
        "description": "The offsets to apply to the spotlight",
        "defaultValue": "\"{ x: 10, y: 10 }\""
      },
      "spotlightRadius": {
        "type": "number",
        "description": "The radius of the spotlight clip path",
        "defaultValue": "4"
      },
      "translations": {
        "type": "IntlTranslations",
        "description": "The translations for the tour"
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      },
      "onPointerDownOutside": {
        "type": "(event: PointerDownOutsideEvent) => void",
        "description": "Function called when the pointer is pressed down outside the component"
      },
      "onFocusOutside": {
        "type": "(event: FocusOutsideEvent) => void",
        "description": "Function called when the focus is moved outside the component"
      },
      "onInteractOutside": {
        "type": "(event: InteractOutsideEvent) => void",
        "description": "Function called when an interaction happens outside the component"
      }
    }
  },
  "tree-view": {
    "api": {
      "collection": {
        "type": "TreeCollection<V>",
        "description": "The tree collection data"
      },
      "expandedValue": {
        "type": "string[]",
        "description": "The id of the expanded nodes"
      },
      "setExpandedValue": {
        "type": "(value: string[]) => void",
        "description": "Function to set the expanded value"
      },
      "selectedValue": {
        "type": "string[]",
        "description": "The id of the selected nodes"
      },
      "setSelectedValue": {
        "type": "(value: string[]) => void",
        "description": "Function to set the selected value"
      },
      "getVisibleNodes": {
        "type": "() => V[]",
        "description": "Function to get the visible nodes"
      },
      "expand": {
        "type": "(value?: string[]) => void",
        "description": "Function to expand nodes.\nIf no value is provided, all nodes will be expanded"
      },
      "collapse": {
        "type": "(value?: string[]) => void",
        "description": "Function to collapse nodes\nIf no value is provided, all nodes will be collapsed"
      },
      "select": {
        "type": "(value?: string[]) => void",
        "description": "Function to select nodes\nIf no value is provided, all nodes will be selected"
      },
      "deselect": {
        "type": "(value?: string[]) => void",
        "description": "Function to deselect nodes\nIf no value is provided, all nodes will be deselected"
      },
      "focus": {
        "type": "(value: string) => void",
        "description": "Function to focus an item node"
      },
      "selectParent": {
        "type": "(value: string) => void",
        "description": "Function to select the parent node of the focused node"
      },
      "expandParent": {
        "type": "(value: string) => void",
        "description": "Function to expand the parent node of the focused node"
      }
    },
    "context": {
      "collection": {
        "type": "TreeCollection<T>",
        "description": "The tree collection data"
      },
      "ids": {
        "type": "Partial<{ root: string; tree: string; label: string; node(value: string): string; }>",
        "description": "The ids of the tree elements. Useful for composition."
      },
      "expandedValue": {
        "type": "string[]",
        "description": "The controlled expanded node ids"
      },
      "defaultExpandedValue": {
        "type": "string[]",
        "description": "The initial expanded node ids when rendered.\nUse when you don't need to control the expanded node ids."
      },
      "selectedValue": {
        "type": "string[]",
        "description": "The controlled selected node ids"
      },
      "defaultSelectedValue": {
        "type": "string[]",
        "description": "The initial selected node ids when rendered.\nUse when you don't need to control the selected node ids."
      },
      "focusedValue": {
        "type": "string",
        "description": "The id of the focused node"
      },
      "selectionMode": {
        "type": "\"single\" | \"multiple\"",
        "description": "Whether the tree supports multiple selection\n- \"single\": only one node can be selected\n- \"multiple\": multiple nodes can be selected",
        "defaultValue": "\"single\""
      },
      "onExpandedChange": {
        "type": "(details: ExpandedChangeDetails) => void",
        "description": "Called when the tree is opened or closed"
      },
      "onSelectionChange": {
        "type": "(details: SelectionChangeDetails) => void",
        "description": "Called when the selection changes"
      },
      "onFocusChange": {
        "type": "(details: FocusChangeDetails) => void",
        "description": "Called when the focused node changes"
      },
      "expandOnClick": {
        "type": "boolean",
        "description": "Whether clicking on a branch should open it or not",
        "defaultValue": "true"
      },
      "typeahead": {
        "type": "boolean",
        "description": "Whether the tree supports typeahead search",
        "defaultValue": "true"
      },
      "dir": {
        "type": "\"ltr\" | \"rtl\"",
        "description": "The document's text/writing direction.",
        "defaultValue": "\"ltr\""
      },
      "id": {
        "type": "string",
        "description": "The unique identifier of the machine."
      },
      "getRootNode": {
        "type": "() => ShadowRoot | Node | Document",
        "description": "A root node to correctly resolve document in custom environments. E.x.: Iframes, Electron."
      }
    }
  }
}